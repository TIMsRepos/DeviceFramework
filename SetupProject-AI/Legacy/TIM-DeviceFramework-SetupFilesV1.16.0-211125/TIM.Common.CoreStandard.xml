<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TIM.Common.CoreStandard</name>
    </assembly>
    <members>
        <member name="T:TIM.Common.CoreStandard.Classes.AzureFunctions.TIMServiceBusException">
            <summary>
            This exception is dedicated for the service bus.
            The action allows to complete or abandon the message or to close the service bus.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterData">
            <summary>
            This class prepares all data that is needed for a cash receipt.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterData.Consumptions">
            <summary>
            Contains the items that were purchased or consumed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterData.Payments">
            <summary>
            Contains all payments.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterData.VatItems">
            <summary>
            Contains the vat items ordered by the vat letter.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterData.CashPaymentInformation">
            <summary>
            Contains information on the amount of given money and returned money.
            Do not use this property directly, it is needed by <see cref="T:TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterAdditionalData"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterData.CreditInformation">
            <summary>
            Contains information on the amount of the credit before and after the cash receipt was created.
            Do not use this property directly, it is needed by <see cref="T:TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterAdditionalData"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterData.SoldVoucherInformation">
            <summary>
            Contains information on sold vouchers.
            Vouchers are not combined, so there will be an entry for each voucher,
            even if a voucher is sold several times.
            Do not use this property directly, it is needed by <see cref="T:TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterAdditionalData"/>.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterData.#ctor(TIM.Common.CoreStandard.Interfaces.CashReceipt.ICashReceiptPrinterRepository)">
            <summary>
            Default constructors
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterData.ReplaceTransferBookings(System.Collections.Generic.List{TIM.Common.CoreStandard.Interfaces.CashReceipt.IQryCashReceiptBookingsSum},System.Collections.Generic.List{TIM.Common.CoreStandard.Interfaces.CashReceipt.IQryCashReceiptBookingsSum},System.Int64)">
            <summary>
            All bookings that have been transferred to another person have the same article and so the same description.
            In order to be able to identify the transferred bookings on the cash receipt, the description (= article description)
            needs to be replaced by the booking description.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterData.VerifyTransferBookings(System.Collections.Generic.List{TIM.Common.CoreStandard.Interfaces.CashReceipt.IQryCashReceiptBookingsSum},System.Collections.Generic.List{TIM.Common.CoreStandard.Interfaces.CashReceipt.IQryCashReceiptBookingsSum},System.Int64)">
            <summary>
            Verifies that, after replacing the bookings, the cash receipt will not change.
            I.e. it will have the same amount and the same number of items.
            </summary>
            <returns>Returns TRUE if bookings can be replaced.</returns>
        </member>
        <member name="T:TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterAdditionalData">
            <summary>
            This class prepares all voucher data that will be displayed on a cash receipt.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterAdditionalData.AdditionalInformation">
            <summary>
            Additional information, e.g. on vouchers and credits.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterAdditionalData.Error">
            <summary>
            Error that might have occured.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterAdditionalData.#ctor(TIM.Common.CoreStandard.Interfaces.CashReceipt.ICashReceiptPrinterRepository,TIM.Common.CoreStandard.Classes.CashReceipt.CashReceiptPrinterData)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem">
            <summary>
            Represents a line on a cash receipt.
            This class is needed for cash receipts.
            All properties must be public, because they are used in a report layout.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem.Quantity">
            <summary>
            Number of identical bookings.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem.ArticlePrice">
            <summary>
            Price of each bookings.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem.BookingID">
            <summary>
            The ID of the booking.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem.DueDate">
            <summary>
            The DueDate of the booking.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem.VatLetter">
            <summary>
            The letter representing the vat of the bookings.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem.ArticleDescription">
            <summary>
            The full description of the receipt item.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem.Total">
            <summary>
            The total amount of the receipt item, i.e. quantity * price.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem.ArticleDescriptionExtension">
            <summary>
            Additional information for the item description.
            Is needed for the <see cref="P:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem.ArticleDescription"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem.MarkAsOptionalArticle">
            <summary>
            Additional information for the item description.
            Is needed for the <see cref="P:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem.ArticleDescription"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem.CreateDate">
            <summary>
            The create date of the item.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem.IDForIntermediateReceipt">
            <summary>
            The ID of the item when an intermediate receipt is printed.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem.#ctor(System.Int32,System.String,System.Decimal)">
            <summary>
            Constructor for item without vat.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem.#ctor(System.Int32,System.String,System.Decimal,TIM.Common.CoreStandard.Interfaces.CashReceipt.IPosition)">
            <summary>
            Constructor for item with booking position.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem.#ctor(System.Int32,System.String,System.Decimal,System.Int64,System.DateTime)">
            <summary>
            Constructor for restaurant position.S
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.CashReceipt.ReceiptItem.#ctor(System.Int32,System.String,System.Decimal,System.String)">
            <summary>
            Constructor for item with vat.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Classes.CashReceipt.VatItem">
            <summary>
            This class is needed for cash receipts.
            It represents a vat rate including the booking amounts
            of the bookings with this vat rate.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.VatItem.VatLetter">
            <summary>
            The character of the vat rate.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.CashReceipt.VatItem.VatRate">
            <summary>
            The amount of the vat rate.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Classes.Contracts.NewContractCalculator">
            <summary>
            This class calculates dates and prices for a new main or sub contract.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.Contracts.NewContractCalculator.#ctor(TIM.Common.CoreStandard.Enums.ContractDurationTermBeginDate,TIM.Common.CoreStandard.Enums.PaymentPeriod,System.Decimal)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.Contracts.NewContractCalculator.#ctor(System.Nullable{System.Byte},System.Nullable{System.Int32},System.Nullable{System.Decimal})">
            <summary>
            Constructor with contract template data.
            </summary>
            <param name="contractTemplateBeginDate">The begin date of the contract template.</param>
            <param name="contractTemplatePaymentPeriodID">The payment period of the contract template.</param>
            <param name="contractTemplatePeriodicSubcontractRate">The rate of the contract template.</param>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.Contracts.NewContractCalculator.ContractDurationTermBeginDate">
            <summary>
            The duration term begin of the contract.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.Contracts.NewContractCalculator.ContractTemplatePaymentPeriod">
            <summary>
            The payment period of the contract template.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.Contracts.NewContractCalculator.ContractTemplatePaymentPeriodAsString">
            <summary>
            Translates the payment period to a string.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.Contracts.NewContractCalculator.RegularRate">
            <summary>
            The amount of the regular rate.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.Contracts.NewContractCalculator.EntryOrUsageBegin">
            <summary>
            Proposed dated for entry or usage begin.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.Contracts.NewContractCalculator.ContractBegin">
            <summary>
            Date for contract begin, depends on <see cref="P:TIM.Common.CoreStandard.Classes.Contracts.NewContractCalculator.EntryOrUsageBegin"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.Contracts.NewContractCalculator.FirstProportionalRate">
            <summary>
            The amount of the first proportional rate.
            Depends on <see cref="P:TIM.Common.CoreStandard.Classes.Contracts.NewContractCalculator.EntryOrUsageBegin"/>
            and <see cref="P:TIM.Common.CoreStandard.Classes.Contracts.NewContractCalculator.ContractBegin"/>
            and <see cref="P:TIM.Common.CoreStandard.Classes.Contracts.NewContractCalculator.RegularRate"/>.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Classes.InvertableBool">
            <summary>
            Use this class in ViewModels instead of 'bool' to allow call Invert within the XAML.
            Attention, this class must always be initialized in the constructor in order to avoid null reference exceptions.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.OperationResult.Success">
            <summary>
            Returns the result of the operation.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.OperationResult.Message">
            <summary>
            Returns all Errors and all Confirmations, separated with a new line.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Classes.OperationResult.Messages">
            <summary>
            Returns all Errors and all Confirmations in a list.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.OperationResult.#ctor">
            <summary>
            Initializes an new OperationResult with <see cref="P:TIM.Common.CoreStandard.Classes.OperationResult.Success"/> = TRUE.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.OperationResult.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes an new OperationResult.
            </summary>
            <param name="success"></param>
            <param name="message">The message for the user. This can be the error message or the success message, depending on <see cref="P:TIM.Common.CoreStandard.Classes.OperationResult.Success"/>.</param>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.OperationResult.AddConfirmation(System.String)">
            <summary>
            Adds the message to the confirmation list if the message is not empty
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.OperationResult.AddError(System.String)">
            <summary>
            Adds the message to the error list and sets Success = FALSE if the message is not empty
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.OperationResult.AddException(System.Exception)">
            <summary>
            Adds the Exception as Error
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.OperationResult.AddOperationResult(TIM.Common.CoreStandard.Classes.OperationResult)">
            <summary>
            Joins an operation result to this operation result.
            Success is only true if both operation results are true.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.OperationResult`1.#ctor(System.Exception)">
            <summary>
            Result with error.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.OperationResult`1.#ctor(`0)">
            <summary>
            Successful result.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Classes.OperationResult`1.#ctor(`0,System.String,System.Boolean)">
            <summary>
            Flexible result.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Constants.Website.Application.Domain">
            <summary>
            For live and test web service (AzureUrl), has to be identical.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Website.Routings.RouteCancelAppointment">
            <summary>
            The routed path for appointment cancellations using a link.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Areas.AddFitnessArea">
            <summary>
            Temporarily add the (not existing) fitness area to SubsidiaryAreas.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.Number">
            <summary>
            Matches any natural number >= 0 (only one)
            IsMatch "1" or "123456"
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.Digits">
            <summary>
            Matches all digits within a string
            IsMatch: "a012b34" => 012 and 34
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.AlphaNumericNumber">
            <summary>
            Matches any alphanumeric number
            IsMatch "T220001293" or "1A2d34f5AA6"
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.SixDigitDecimal">
            <summary>
            Matches a decimal number from 0,00 to 999999,99
            IsMatch: "123456,12" or ",1" or "12"
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.CommaSeparatedNumbers">
            <summary>
            Matches all natural Numbers and natural Numbers separated with a semicolon (semicolon included in Match!)
            IsMatch: "2;2" or "431904812144"
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.Iban">
            <summary>
            Matches all IBANs
            IsMatch: "DE89370400440532013000" or "GT82TRAJ01020000001210029690"
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.Email">
             <summary>
             Matches Emails
             IsMatch: "test@test.de" or "test.bob@co.uk"
            
             More practical implementation of RFC 5322 omitting IP addresses, domain-specific addresses, the syntax using double quotes and square brackets.
             It will still match 99.99% of all email addresses in actual use today.
             Source: http://www.regular-expressions.info/email.html
             </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.GermanPostalCode">
            <summary>
            Matches German Postal Codes
            german postal codes are valid if they lie between the currently smallest and largest value: from '01001' to '99998'.
            IsMatch: "12345" or "22041"
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.IpAddress">
            <summary>
            Matches IP-Addresses
            IsMatch: "0.0.0.0" or "111.111.111.111"
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.DataMatrix">
            <summary>
            Matches a DataMatrix
            IsMatch: "123;123456789;acb09;abc09;abc09" or "123;123456789;;;"
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.ArchiveDataMatrix">
            <summary>
            Can only match a data matrix if the <variables/> are replaced correctly
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.Date">
            <summary>
            Regex for yyyy-MM-dd date format
            this will prevent months >12 and days >31, but won't check specific months for length (ie it won't block 30th Feb or 31st Apr)
            IsMatch: "2016-01-01" or "0000-00-00"
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.YoutubeID">
            <summary>
            Regex for youube id with exactly eleven characters
            7InRmTGU0Hg is valid
            7InRmTGU0HgA is invalid
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.YoutubeIDForArticle">
            <summary>
            Regex for youtube id with exactly eleven characters
            [YouTubeID=‘7InRmTGU0Hg‘] is valid
            [YouTubeID=‘7InRmTGU0HgA‘] is invalid
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.HtmlTagsWithContent">
             <summary>
             Removes all Html tags including the content between the tags.
             <p1>Text</p1> is not valid
             <line1/> is not valid
             <link test='...' >test</link> is not valid
            
             Only use for pseudo html!
             </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.AppSettingErrorMessage">
            <summary>
            Used to check if a error message contains any string that indicates a missing or invalid config file
            Any string that contains "AppSetting '" followed by any characters and then
            followed by "'is missing or not valid" will be valid.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.ValidDecimal">
            <summary>
            Used to check if a string is valid decimal with maximal 2 digits after comma.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Constants.Regex.InvalidXmlCharacters">
            <summary>
            Finds the ASCII characters 1-8, 11, 12, 14-31.
            Allowed are 9=Tab, 10=Line Feed and 13=Return.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Dictionary">
            <summary>
            This is also used in TIM-Online.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto">
            <summary>
            Use this class to reserve an appointment or a course appointment.
            Is used in Database and App and WebSite.
            POST to /api/AppointmentCreateAppointment_V3
            First time with checkOnly=true until reservation is valid,
            then with checkOnly=false to create reservation.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.PersonID">
            <summary>
            The ID of the person reserving the appointment.
            Use only for the Club Planner interface
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.PersonData">
            <summary>
            This is set only if the reservation is NOT done for a profile (without login),
            but instead with person name and address.
            Then <see cref="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.PersonProfileID"/> and <see cref="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.IdentificationCode"/> are
            empty/default.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.UpdateMissingPersonData">
            <summary>
            This is set only if the person data is missing for the reservation.
            This is only the case when the reservation is done with a profile and
            the person data is missing. Should be NULL when checkOnly=false.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.PersonProfileID">
            <summary>
            The profile ID of the person reserving the appointment. Can be the default
            value (00000…), then the <see cref="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.PersonData"/> must be set.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.IdentificationCode">
            <summary>
            The identification code of the profile of the person reserving the
            appointment. Can be empty, then the <see cref="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.PersonData"/> must be set.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.DateOfSchedule">
            <summary>
            The date of the appointment.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.SubsidiaryID">
            <summary>
            The subsidiary ID of the appointment.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.ServiceEmployeeID">
            <summary>
            The employee ID of the appointment.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.ServiceEmployeeFixed">
            <summary>
            If TRUE, the employee will be marked as fixed for this appointment.
            Default is FALSE.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.ArticleID">
            <summary>
            The article ID of the appointment.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.CourseScheduleID">
            <summary>
            If a course schedule ID is provided, a course appointment will be reserved.
            Else an appointment will be reserved.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.BeginTime">
            <summary>
            The begin date and time of the appointment.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.AmountInCent">
            <summary>
            The price of the appointment in cent.
            0 when checkOnly=TRUE, else the price that was shown.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.ExternalPaymentMode">
            <summary>
            The payment mode of the payment of the appointment
            (Enum: ExternalPaymentMode).
            - 0=NotSelected (when checkOnly=TRUE)
            - 1=Visa / 2=MasterCard / 3=Amex / 4=Diners (not used) => all by Adyen
            - 5=PayPal
            - 6=NoPrepayment (payment later, only if allowed by article)
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.CardData">
            <summary>
            Card data for credit card payment. Only set for payments by credit card:
            ExternalPaymentMode 1-4
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.CardPaymentData">
            <summary>
            Contains the credit card data.
            With or without PSD2 / 3D authorization.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.CheckOnly">
            <summary>
            If TRUE, the appointment will neither be executed nor be payed, it will only
            be checked.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.CommunicationChannelID">
            <summary>
            The communication channel indicates the source of the appointment, e.g. TIM,
            the app or the WebSite.
            - Intern=1
            - App=2
            - Homepage=3
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.RedirectPathToCheckPayPalPayment">
            <summary>
            <see cref="P:TIM.Common.CoreStandard.Interfaces.Online.IPayPalRedirect.RedirectPathToCheckPayPalPayment"/>
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto.LocalHostUrlForDebugging">
            <summary>
            <see cref="P:TIM.Common.CoreStandard.Interfaces.Online.IPayPalRedirect.LocalHostUrlForDebugging"/>
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto">
            <summary>
            This is the result for <see cref="T:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentDto"/>.
            Is used in Database and App and WebSite.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto.ReserveAppointmentStatus">
            <summary>
            The result of the reservation as in <see cref="T:TIM.Common.CoreStandard.Enums.ReserveAppointmentStatus"/>:
            - AppointmentReserved = 1
            - AppointmentValidButNotPayed = 2
            - AppointmentInvalid = 3
            - Error = 4
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto.ReservationIsOnWaitingList">
            <summary>
            Is TRUE if the reservation is only on the waiting list.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto.ExternalPaymentStatus">
            <summary>
            The result of the payment as in <see cref="T:TIM.Common.CoreStandard.Enums.ExternalPaymentStatus"/>:
            - PaymentAccepted = 1
            - PaymentRefused = 2
            - PaymentError = 3
            - RequestError = 4
            - OtherError = 5
            - NoPayment = 6
            - RedirectFor3DSecureVerification = 7
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto.Amount">
            <summary>
            The price of the appointment.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto.Message">
            <summary>
            Any message for the user.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto.CheckResult">
            <summary>
            The result if reservation was only checked but not executed.
            As in <see cref="T:TIM.Common.CoreStandard.Enums.CheckResult"/>:
            - CanBeReserved = -1
            - NotSet = 0
            - OtherError = 1
            - PersonAlreadyHasReservationForCourseSchedule = 2
            - CourseScheduleHasNoSparePlaces = 3
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto.CheckNumberOfSparePlaces">
            <summary>
            If the reservation was only checked but not executed.
            Provides the number of spare places for an event.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto.CheckPrice">
            <summary>
            If the reservation was only checked but not executed.
            Calculates the price of the appointment.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto.CheckIsFlatrate">
            <summary>
            If the reservation was only checked but not executed.
            Returns TRUE if the appointment is free of charge due to a flatrate of the user.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto.PayPalRequestUrl">
            <summary>
            <see cref="P:TIM.Common.CoreStandard.Interfaces.Online.IPayPalResult.PayPalRequestUrl"/>
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto.ExternalPaymentPendingPaymentID">
            <summary>
            For PayPal-Payment only, returns the pending payment ID.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto.ExternalPaymentPendingPaymentPersonID">
            <summary>
            For PayPal-Payment only.
            Returns the PersonID if the reservation was done without a profile (i.e. with name and address).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto.AppointmentID">
            <summary>
            ID of the appointment.
            Required for club planner
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto.RedirectFor3DSecureVerification">
            <summary>
            For credit card payment with 3D secure verification only.
            Is set for <see cref="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto.ExternalPaymentStatus"/> = <see cref="F:TIM.Common.CoreStandard.Enums.ExternalPaymentStatus.RedirectFor3DSecureVerification"/>.
            Contains the information for the redirect, where the 3D secure verification will take place.
            Needed for the old Adyen Classic API.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto.RedirectFor3DSecure">
            <summary>
            For credit card payment with 3D secure verification only.
            Is set for <see cref="P:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentResultDto.ExternalPaymentStatus"/> = <see cref="F:TIM.Common.CoreStandard.Enums.ExternalPaymentStatus.RedirectFor3DSecureVerification"/>.
            Contains the information for the redirect, where the 3D secure verification will take place.
            Needed for the new Adyen Checkout API.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AppointmentData.AppointmentTimeSlotsRequest">
            <summary>
            Find available time slots for new appointment.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AppointmentData.CancelAppointmentDto">
            <summary>
            Represents an appointment or a course appointment that will be canceled.
            Is used in Database and App.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.CancelAppointmentDto.PersonProfileID">
            <summary>
            The person profile ID to identify the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.CancelAppointmentDto.IdentificationCode">
            <summary>
            The identification code of the profile to validate the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.CancelAppointmentDto.AppointmentID">
            <summary>
            The id of the appointment that will be canceled.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.CancelAppointmentDto.CourseScheduleID">
            <summary>
            The id of the course schedule of the course that will be canceled.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.CancelAppointmentDto.AllowChargeForReservation">
            <summary>
            Some reservations can not be canceled free of charge.
            If this is TRUE, the user allows to charge for the
            reservation if no other appointment will fill the gap.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.CancelAppointmentDto.PersonID">
            <summary>
            The ID of the person reserved the appointment.
            Use only for the Club Planner interface
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.CancelAppointmentDto.CommunicationChannelID">
            <summary>
             Use only for the Club Planner interface otherwise null
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.CancelAppointmentDto.CheckOnly">
            <summary>
            If TRUE, then the appointment will not be cancelled.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AppointmentData.CancelAppointmentResultDto">
            <summary>
            Represents the result of the cancellation of an appointment
            or a course appointment (CancelAppointmentDto).
            Is used in Database and App.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.CancelAppointmentResultDto.Successful">
            <summary>
            Is TRUE if the cancellation was successful.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.CancelAppointmentResultDto.ReservationWillBeCharged">
            <summary>
            Is TRUE if the cancellation came too late for a free cancellation.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.CancelAppointmentResultDto.Message">
            <summary>
            The error message for the user.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.CancelAppointmentResultDto.Amount">
            <summary>
            Contains the amount to be charged if ReservationWillBeCharge is True.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AppointmentData.PersonDto">
            <summary>
            This class represents a person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.PersonDto.GenderID">
            <summary>
            The gender of the person: Male=1/Female=2 (enum Gender).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.PersonDto.TitleID">
            <summary>
            The title of the person (0=no title).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.PersonDto.FirstName">
            <summary>
            The first name of the person (max length is 50).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.PersonDto.LastName">
            <summary>
            The last name of the person (max length is 50).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.PersonDto.Street">
            <summary>
            The street and street number of the person (max length is 50).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.PersonDto.Zip">
            <summary>
            The ZIP of the person (max length is 5).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.PersonDto.City">
            <summary>
            The city of the person (max length is 50).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.PersonDto.CountryID">
            <summary>
            The ID of the country of the person (Germany=52).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.PersonDto.Email">
            <summary>
            The email address of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.PersonDto.Mobile">
            <summary>
            The mobile number of the person.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AppointmentData.UpdateMissingPersonDataDto">
            <summary>
            This class allows to update the missing person data
            for an appointment or course appointment.
            Only needs to be provided when actually reserving the
            appointment, can be NULL when checkOnly is TRUE.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.UpdateMissingPersonDataDto.Street">
            <summary>
            Street and street number (max. length 50).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.UpdateMissingPersonDataDto.Zip">
            <summary>
            ZIP (max. length 5).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.UpdateMissingPersonDataDto.City">
            <summary>
            City (max. length 50).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.UpdateMissingPersonDataDto.Email">
            <summary>
            Valid email address (max. length 50).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentData.UpdateMissingPersonDataDto.Mobile">
            <summary>
            Valid mobile or landline phone number (max. length 50).
            ATTENTION: This now can be any phone number!
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AppointmentLinkData.AppointmentDataDto">
            <summary>
            This class holds the data needed to cancel an appointment
            or a course appointment using a link.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentLinkData.AppointmentDataDto.PersonID">
            <summary>
            The ID of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentLinkData.AppointmentDataDto.AppointmentID">
            <summary>
            Optional. The ID of the appointment that will be cancelled.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AppointmentLinkData.AppointmentDataDto.CourseScheduleID">
            <summary>
            Optional. The ID of the course appointment that will be cancelled.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ArticleData.ArticleSalesRestrictionsDto.ArticleID">
            <summary>
            The ID of the article to be checked.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ArticleData.ArticleSalesRestrictionsDto.PersonID">
            <summary>
            The ID of the person to be checked.
            Can be NULL or 0 for walk in customers, than only the over all limit will be checked.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ArticleData.ArticleSalesRestrictionsDto.SubsidiaryID">
            <summary>
            The ID of the subsidiary where the article will be sold.
            Optional, if the value is NULL or -1, then the subsidiary limit will not be checked (needed to calculate the overall consumption).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ArticleData.ArticleSalesRestrictionsResultDto.Successful">
            <summary>
            Is TRUE if the article can be sold.
            Else any limit is reached or exceeded or any other restriction does not allow the consumption.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ArticleData.ArticleSalesRestrictionsResultDto.Message">
            <summary>
            Contains the error message if the article can not be sold.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ArticleData.ArticleSalesRestrictionsResultDto.CountConsumption">
            <summary>
            If a PersonID and/or Subsidiary was given, than this will count the consumption of the person and/or subsidiary.
            Else this will count the over all consumption of the article.
            The consumption can be bookings, appointments or course appointments, depending on the article type.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ExportData.ExternalPersonDto">
            <summary>
            Contains the input data for new or changed persons.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ExportData.ExternalPersonDto.PersonID">
            <summary>
            The TIM person ID.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ExportData.ExternalPersonDto.PersonGuid">
            <summary>
            The external person ID.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ExportData.ExternalPersonDto.Gender">
            <summary>
            The gender of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ExportData.ExternalPersonDto.Title">
            <summary>
            The title of the person, e.g. 'Dr.', 'Dr. med.', 'Prof.', 'Prof. Dr.', 'Prof. Dr. med.'
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ExportData.ExternalPersonDto.FirstName">
            <summary>
            The first and second name of the person. Must not be longer than 50 characters.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ExportData.ExternalPersonDto.LastName">
            <summary>
            The last name of the person. Must not be longer than 50 characters.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ExportData.ExternalPersonDto.SubsidiaryID">
            <summary>
            The favorite subsidiary of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ExportData.ExternalPersonDto.PersonStatus">
            <summary>
            The status of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ExportData.ExternalPersonDto.CountryIso">
            <summary>
            The two letter country code of the persons address.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ExportData.ExternalPersonDto.ExternalID">
            <summary>
            ID in external systems
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ExportData.ExternalPersonResultDto">
            <summary>
            Contains the result when a person was saved or changed in TIM.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ExportData.ExternalPersonResultDto.Successful">
            <summary>
            Is TRUE if the person data was saved successfully.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ExportData.ExternalPersonResultDto.Message">
            <summary>
            Contains any error message if the person data could not be saved.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ExportData.ExternalPersonResultDto.PersonID">
            <summary>
            The TIM person ID.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ExportData.ExternalPersonResultDto.PersonGuid">
            <summary>
            The external person ID.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalContactDto">
            <summary>
            This data contains the values of a <see cref="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedExternalContactDto"/>,
            but mapped to TIM values.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalContactDto.TypedContactDto">
            <summary>
            Contains the the data before it was mapped.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalContactDto.ExternalID">
            <summary>
            The external ID of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalContactDto.PersonInformation">
            <summary>
            General information on the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalContactDto.ContactData">
            <summary>
            Name, salutation and date of birth of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalContactDto.Address">
            <summary>
            Address of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalContactDto.CommunicationData">
            <summary>
            Phone numbers and email of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalContactDto.Preferences">
            <summary>
            Contact preferences of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalContactDto.MemberDetail">
            <summary>
            Contains the member reference if this is (or was) a member.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalContactDto.Membership">
            <summary>
            Contains details on the current membership.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalContactDto.MembershipStatus">
            <summary>
            Contains details on the status of the current membership.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalContactDto.SubContractChanges">
            <summary>
            Contains details on new or changed sub contracts.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalContactDto.ContactDeletionAudit">
            <summary>
            If this is not NULL, then the person has been deleted.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalContactDto.Alerts">
            <summary>
            This list contains any new or changed alerts.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalContactDto.Charges">
            <summary>
            <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto.Charges"/>
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalPersonInformationDto">
            <summary>
            General information on the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalPersonInformationDto.StatusID">
            <summary>
            The persons status as in <see cref="T:TIM.Common.CoreStandard.Enums.PersonStatus"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalPersonInformationDto.SubsidiaryID">
            <summary>
            The preferred subsidiary of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalPersonInformationDto.BannedFromEntryFlag">
            <summary>
            If TRUE, then the person is banned from entry to all clubs.
            This is nullable because we might not know the current value.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalPersonInformationDto.DebitNoteDeactivatedFlag">
            <summary>
            If TRUE, then debit notes are deactivated for the person.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalContactDataDto">
            <summary>
            Name, salutation and date of birth of the person.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalAddressDto">
            <summary>
            Address of the person.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalCommunicationDataDto">
            <summary>
            Phone numbers and email of the person.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedExternalPreferencesDto">
            <summary>
            Contact preferences of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedMemberDetailDto.MemRefNo">
            <summary>
            The ClubCentric member reference as a varchar(18).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedMemberDetailDto.CurrentMembershipID">
            <summary>
            The ID of the <see cref="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedMembershipHistoryDto"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedMemberDetailDto.CurrentMembershipStatusID">
            <summary>
            The ID of the <see cref="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedMemberStatusHistoryDto"/>.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedMembershipHistoryDto">
            <summary>
            Details on the current membership of the person.
            Find the ID of the current membership in <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedMemberDetailDto.CurrentMembershipID"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedMembershipHistoryDto.JoinDate">
            <summary>
            The join date of the current main contract is mandatory.
            E.g. "17/08/2020 00:00:00"
            Will be mapped to Contracts.EntryBegin and Contracts.Begin.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedMembershipHistoryDto.ExpiryDate">
            <summary>
            The expiry date of the current main contract is mandatory.
            "17/11/2020 00:00:00"
            Will be mapped to Contracts.End.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedMembershipHistoryDto.ContractTemplateID">
            <summary>
            The ID of the package will be mapped to Contracts.ContractTemplateID.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedMemberStatusHistoryDto.ExternalMemberStatus">
            <summary>
            The current member status.
            Map the current status FREEZE to TIMs rest period.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedMemberStatusHistoryDto.ReasonID">
            <summary>
            The member status reason for the current <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedMemberStatusHistoryDto.ExternalMemberStatus"/> of the member.
            Map <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedMemberStatusHistoryDto.ExternalMemberStatus"/> <see cref="F:TIM.Common.CoreStandard.Enums.ExternalMemberStatus.Canceled"/>
            and <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedMemberStatusHistoryDto.ReasonID"/> 'Banned'
            to TIMs BannedFromEntryFlag.
            See enum MemberStatusReason.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedMemberStatusHistoryDto.StartDate">
            <summary>
            The start date if the status. Is usually the current date, but can also be
            a future date if the membership hasn't started jet.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedMemberStatusHistoryDto.EndDate">
            <summary>
            The end date of the status. Will be NULL if this is not a freeze.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedSalesItemHistoryDto.ExternalID">
            <summary>
            The ID of the sub contract.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedSalesItemHistoryDto.ContractTemplateID">
            <summary>
            The ID of the sales item, will be mapped to a ContractTemplate.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedSalesItemHistoryDto.StartDate">
            <summary>
            The start date of the sub contract.
            There is no end, because the sub contract will be renewed until
            it reaches the <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedSalesItemHistoryDto.RenewUntilDate"/> (which can be NULL).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedSalesItemHistoryDto.RenewUntilDate">
            <summary>
            The sub contract will be renewed until it reaches this date.
            This date will be NULL while the sub contract has not been
            canceled.
            If this date is smaller or equal today, then the sub contract
            is cancelled.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedContactDeletionAuditDto">
            <summary>
            Contains details if the person has been deleted.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedContactDeletionAuditDto.ContactType">
            <summary>
            The type of contact as int.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedContactDeletionAuditDto.EditTS">
            <summary>
            DateTime, when the person was last edited (prior to deletion).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedContactDeletionAuditDto.DeletedTS">
            <summary>
            DateTime, when the person was deleted.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedContactDeletionAuditDto.SubsidiaryID">
            <summary>
            The subsidiary of the deleted contact.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedContactDeletionAuditDto.UserId">
            <summary>
            ID of the user who deleted the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedContactDeletionAuditDto.ActionID">
            <summary>
            Details as int:
            1 = Merged via the UI
            2 = Deleted via the UI
            3 = Merged via the API
            4 = Deleted via the API
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedAlertDto.ExternalID">
            <summary>
            The ID of the alert as INT.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedAlertDto.EditTS">
            <summary>
            The edit time stamp as DateTime.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedAlertDto.Subject">
            <summary>
            The subject of the alert.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedAlertDto.Message">
            <summary>
            The message of the alert.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedAlertDto.Severity">
            <summary>
            The severity of the alert.
            0: low
            1: medium
            2: high
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedAlertDto.IsAcknowledged">
            <summary>
            If TRUE, then the alert is acknowledged and will not be shown in TIM any more.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedAlertDto.IsActive">
            <summary>
            If FALSE, then the alert is deactivated and will not be shown in TIM any more.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedAlertDto.ActivationTime">
            <summary>
            The alert will be shown from this date on.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedAlertDto.ExpirationTime">
            <summary>
            The alert will be shown until this date.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedChargeDto">
            <summary>
            <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto.Charges"/>
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedChargeDto.SubsidiaryID">
            <summary>
            The ID of the subsidiary where the charge should be created.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedChargeDto.ChargeID">
            <summary>
            Unique charge ID (needed for PayCharge API).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedChargeDto.Description">
            <summary>
            Description of the transaction.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedChargeDto.OutstandingAmount">
            <summary>
            The amount left to pay on the transaction.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedChargeDto.HeadlineAmount">
            <summary>
            The total amount of the charge.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedChargeDto.EditTS">
            <summary>
            The edit timestamp of the transaction.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MappedChargeDto.LastEditedBy">
            <summary>
            The person who last edited the charge.
            LastEditedBy is a smallint type corresponding to the ClubCentric user id.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ServiceBusMessageDto">
            <summary>
            Represents a message that is send via the service bus.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ServiceBusMessageDto.SequenceNumber">
            <summary>
            The number of the message.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ServiceBusMessageDto.Body">
            <summary>
            The content of the message.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ServiceBusMessageDto.MessageID">
            <summary>
            The ID of the message.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ServiceBusMessageResultDto">
            <summary>
            The result for <see cref="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ServiceBusMessageDto"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ServiceBusMessageResultDto.Message">
            <summary>
            The message (success or error).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ServiceBusMessageResultDto.Successful">
            <summary>
            Is TRUE if everything was successful.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ServiceBusMessageResultDto.ServiceBusAction">
            <summary>
            The service bus action to take.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ServiceBusMessageResultDto.PersonAction">
            <summary>
            The action that was saved due to the message.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ServiceBusMessageResultDto.PersonID">
            <summary>
            The person that was inserted or updated.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedExternalContactDto">
            <summary>
            Contains the same data as <see cref="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto"/>,
            but all values have the right type.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedExternalContactDto.Contact">
            <summary>
            Concat data for all contact types.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedExternalContactDto.ContactAddress">
            <summary>
            The primary address for all contact types.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedExternalContactDto.ContactCommunication">
            <summary>
            This list contains any communication details for all contact types.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedExternalContactDto.ContactPreferences">
            <summary>
            This list contains any contact preferences for all contact types.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedExternalContactDto.MemberDetail">
            <summary>
            The member details, will be set for contact type = 3 (members).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedExternalContactDto.MembershipHistory">
            <summary>
            Contains the current main contract of the member.
            Will only be set for contact type = 3 (members).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedExternalContactDto.MemberStatusHistory">
            <summary>
            Contains the current membership status of the member.
            Will only be set for contact type = 3 (members).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedExternalContactDto.SalesItemHistory">
            <summary>
            Contains all current sub contracts of the member.
            This list will only be filled for contact type = 3 (members).
            An empty list means, the member does not have any sub contracts.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedExternalContactDto.ContactDeletionAudit">
            <summary>
            If this is not NULL, then the person has been deleted.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedExternalContactDto.Alerts">
            <summary>
            This list contains any new or changed alerts.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedExternalContactDto.Charges">
            <summary>
            <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto.Charges"/>
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDto">
            <summary>
            Contains the information of <see cref="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDto"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDto.HomeSiteID">
            <summary>
            The club centric home site ID that needs to be mapped to TIMs SubsidiaryID.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDto.CreateTS">
            <summary>
            The create date in GMT, e.g. "06/06/2011 13:54:51".
            No mapping needed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDto.EditTS">
            <summary>
            The last change date in GMT, e.g. "06/06/2011 13:54:51".
            No mapping needed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDto.Title">
            <summary>
            The title as a varchar(16) string needs to be mapped to TIMSs TitleID.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDto.FirstName">
            <summary>
            The first name is a varchar(48).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDto.LastName">
            <summary>
            The last name is a varchar(48).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDto.BirthDate">
            <summary>
            The optional date of birth will be mapped to TIMs Born.
            E.g. "06/06/1991 00:00:00".
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDto.GenderID">
            <summary>
            The Gender will be mapped to TIMs Sex.
            See enum Gender.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDto.AccountStatus">
            <summary>
            The status of the customers contract account.
            See enum AccountStatus.
            No mapping needed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDto.AccountEnabled">
            <summary>
            Will be mapped to TIMs Customers.DebitNoteDeactivatedFlag.
            Mapping: True=>0 / False=>1
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDto.ContactType">
            <summary>
            The ID of the type of contact.
            Will be mapped to TIMs PersonStatus.
            Only members will have MemberDetail, MembershipHistory, MemberStatusHistory and/or SalesItemHistory.
            See enum ContactType.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDto.IsActive">
            <summary>
            If this is FALSE, the contact has been deactivated.
            Will be mapped to TIMs person status 'deactivated'.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDto.UDFAgeVerifiedFlag">
            <summary>
            Will be mapped to TIMs AgeVerifiedFlag.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactAddressDto">
            <summary>
            The primary address of the contact.
            The country will always be GERMANY.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactAddressDto.Line1">
            <summary>
            A varchar(64) that contains street name and number.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactAddressDto.City">
            <summary>
            A varchar(64) that contains the city name.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactAddressDto.PostCode">
            <summary>
            A varchar(12) that contains the ZIP code.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactCommunicationDto">
            <summary>
            The communication data of the contact.
            CatID / SubCatID
            41/1 = home phone
            41/2 = work phone
            51/1 = mobile
            61/1 = email
            71/1 = fax
            81/1 = website
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactCommunicationDto.CatID">
            <summary>
            The category ID is an INT.
            See enum ContactCategory.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactCommunicationDto.SubCatID">
            <summary>
            The sub category ID is an INT.
            See enum ContactSubCategory.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactCommunicationDto.DataValue">
            <summary>
            The data value is a varchar(64).
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactPreferenceDto">
            <summary>
            The contact preferences of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactPreferenceDto.PickListItemId">
            <summary>
            See enum PickListItem.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactPreferenceDto.IsAllowed">
            <summary>
            The value of the contact preference.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactPreferenceDto.EditTS">
            <summary>
            Timestamp of the contact preference.
            No mapping needed.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedMemberDetailDto">
            <summary>
            The member detail of the member (ContactType=3).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedMemberDetailDto.MemRefNo">
            <summary>
            The ClubCentric member reference as a varchar(18).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedMemberDetailDto.CurrentMembershipID">
            <summary>
            The ClubCentric current membership ID.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedMemberDetailDto.CurrentStatusID">
            <summary>
            The FK to the current status.
            No mapping needed.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedMembershipHistoryDto">
            <summary>
            The current membership of the member (only for ContactType=3).
            For new and changed memberships, the primary subsidiary of the
            membership will be the primary subsidiary of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedMembershipHistoryDto.JoinDate">
            <summary>
            The join date of the current main contract is mandatory.
            E.g. "17/08/2020 00:00:00"
            Will be mapped to Contracts.EntryBegin and Contracts.Begin.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedMembershipHistoryDto.ExpiryDate">
            <summary>
            The expiry date of the current main contract is mandatory.
            "17/11/2020 00:00:00"
            Will be mapped to Contracts.End.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedMembershipHistoryDto.PackageID">
            <summary>
            The ID of the package will be mapped to Contracts.ContractTemplateID.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedMemberStatusHistoryDto">
            <summary>
            The current status of the membership (only for ContactType=3).
            E.g. Member, Former member, Freeze.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedMemberStatusHistoryDto.StatusID">
            <summary>
            The current member status.
            Try to map to TIMs person status depending on the package type (for member, employee, freelancer etc).
            Also map the status "Cancelled" with the MemberStatusReason "Banned Members" (ID=7) to TIMs BannedFromEntryFlag.
            See enum MemberStatus>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedMemberStatusHistoryDto.ReasonID">
            <summary>
            The member status reason for the current <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedMemberStatusHistoryDto.StatusID"/> of the member.
            Map <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedMemberStatusHistoryDto.StatusID"/> 'Cancel'
            and <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedMemberStatusHistoryDto.ReasonID"/> 'Banned'
            to TIMs BannedFromEntryFlag.
            See enum MemberStatusReason.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedMemberStatusHistoryDto.StartDate">
            <summary>
            The start date if the status. Is usually the current date, but can also be
            a future date if the membership hasn't started jet.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedMemberStatusHistoryDto.EndDate">
            <summary>
            The end date of the status. Will be NULL if this is not a freeze.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedMemberStatusHistoryDto.EditTS">
            <summary>
            Timestamp of the membership status.
            No mapping needed.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedSalesItemHistoryDto">
            <summary>
            A current sub contract of the member.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedSalesItemHistoryDto.ID32">
            <summary>
            The ID of the sub contract.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedSalesItemHistoryDto.SalesItemID">
            <summary>
            The ID of the sales item, will be mapped to a ContractTemplate.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedSalesItemHistoryDto.StartDate">
            <summary>
            The start date of the sub contract.
            There is no end, because the sub contract will be renewed until
            it reaches the <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedSalesItemHistoryDto.RenewUntilDate"/> (which can be NULL).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedSalesItemHistoryDto.RenewUntilDate">
            <summary>
            The sub contract will be renewed until it reaches this date.
            This date will be NULL while the sub contract has not been
            canceled.
            If this date is smaller or equal today, then the sub contract
            is cancelled.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedSalesItemHistoryDto.EditTS">
            <summary>
            Time stamp of the sub contract.
            No mapping needed.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDeletionAuditDto">
            <summary>
            Contains details if the person has been deleted.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDeletionAuditDto.ContactType">
            <summary>
            The type of contact as int.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDeletionAuditDto.EditTS">
            <summary>
            DateTime, when the person was last edited (prior to deletion).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDeletionAuditDto.DeletedTS">
            <summary>
            DateTime, when the person was deleted.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDeletionAuditDto.HomeSiteID">
            <summary>
            Site of the contact as int.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDeletionAuditDto.UserId">
            <summary>
            ID of the user who deleted the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedContactDeletionAuditDto.ActionID">
            <summary>
            Details as int:
            1 = Merged via the UI
            2 = Deleted via the UI
            3 = Merged via the API
            4 = Deleted via the API
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedAlertDto.ID32">
            <summary>
            The ID of the alert as INT.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedAlertDto.EditTS">
            <summary>
            The edit time stamp as DateTime.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedAlertDto.Subject">
            <summary>
            The subject of the alert.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedAlertDto.Message">
            <summary>
            The message of the alert.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedAlertDto.Severity">
            <summary>
            The severity of the alert.
            0: low
            1: medium
            2: high
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedAlertDto.IsAcknowledged">
            <summary>
            If TRUE, then the alert is acknowledged and will not be shown in TIM any more.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedAlertDto.IsActive">
            <summary>
            If FALSE, then the alert is deactivated and will not be shown in TIM any more.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedAlertDto.ActivationTime">
            <summary>
            The alert will be shown from this date on.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedAlertDto.ExpirationTime">
            <summary>
            The alert will be shown until this date.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedChargeDto">
            <summary>
            <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto.Charges"/>
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedChargeDto.SiteID">
            <summary>
            The ID of the club where the charge should be created.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedChargeDto.ChargeID">
            <summary>
            Unique charge ID (needed for PayCharge API).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedChargeDto.Description">
            <summary>
            Description of the transaction.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedChargeDto.OutstandingAmount">
            <summary>
            The amount left to pay on the transaction.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedChargeDto.HeadlineAmount">
            <summary>
            The total amount of the charge.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedChargeDto.EditTS">
            <summary>
            The edit timestamp of the transaction.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.TypedChargeDto.LastEditedBy">
            <summary>
            The person who last edited the charge.
            LastEditedBy is a smallint type corresponding to the ClubCentric user id.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto">
             <summary>
             This represents a JSON that will be send by ClubCentric over the service bus.
             This could be a new contact or changes of an existing contact.
            
             The contact GUID will be transferred as the Message ID of the service bus message
             (e.g. "I5Rk3IyMTk6myBMlCFPG1Q"). This value will be mapped to Person.ExternalID.
             </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto.Contacts">
            <summary>
            This list contains no or one concat data.
            For all contact types.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto.ContactAddress">
            <summary>
            This list contains no or the primary address.
            For all contact types.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto.ContactCommunication">
            <summary>
            This list contains no, one or more contact communication details.
            For all contact types.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto.ContactPreferences">
            <summary>
            This list contains no, one or more contact preferences.
            For all contact types.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto.MemberDetail">
            <summary>
            This list contains no or one entry.
            This list will only be filled for contact type = 3 (members).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto.MembershipHistory">
            <summary>
            Contains the current main contract of the member.
            This list contains no or one entry.
            This list will only be filled for contact type = 3 (members).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto.MemberStatusHistory">
            <summary>
            Contains the current membership status of the member.
            This list contains no or one entry.
            This list will only be filled for contact type = 3 (members).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto.SalesItemHistory">
            <summary>
            Contains current sub contracts of the member.
            This list contains no, one or several entries.
            When a subcontract is changed, only the changed sub contract will be transmitted.
            This list will only be filled for contact type = 3 (members).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto.ContactDeletionAudit">
            <summary>
            This list contains no or one entry.
            If this list contains an entry, then the person has been deleted.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto.Alerts">
            <summary>
            This list contains any new or changed alerts.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto.Charges">
            <summary>
            This list contains new/changed charges for the consumption account of the person.
            A charge can be transferred several times, the outstanding amount might change.
            <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ChargeDto.ChargeID"/> and <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ChargeDto.HeadlineAmount"/> will not change.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDto">
            <summary>
            The contact GUID is not part of the JSON, it will be
            transferred as the Message ID of the service bus message.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDto.HomeSiteID">
            <summary>
            The club centric home site ID that needs to be mapped to TIMs SubsidiaryID.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDto.CreateTS">
            <summary>
            The create date in GMT, e.g. "06/06/2011 13:54:51".
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDto.EditTS">
            <summary>
            The last change date in GMT, e.g. "06/06/2011 13:54:51".
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDto.Title">
            <summary>
            The title as a varchar(16) string needs to be mapped to TIMSs TitleID.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDto.FirstName">
            <summary>
            The first name is a varchar(48).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDto.LastName">
            <summary>
            The last name is a varchar(48).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDto.BirthDate">
            <summary>
            The date of birth will be mapped to TIMs Born.
            E.g. "06/06/1991 00:00:00".
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDto.Gender">
            <summary>
            The Gender will be mapped to TIMs Sex.
            Mapping: 1=true, 2-3=false
            See enum Gender.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDto.AccountStatus">
            <summary>
            The status of the customers contract account.
            According to Payal, no mapping is needed (email from 11.11.20 with my answer 12.11.20).
            See enum AccountStatus.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDto.AccountEnabled">
            <summary>
            Will be mapped to TIMs Customers.DebitNoteDeactivatedFlag:
            Mapping: True=>0 / False=>1
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDto.ContactType">
            <summary>
            The ID of the type of contact.
            Will be mapped to TIMs PersonStatus.
            Only members will have MemberDetail, MembershipHistory, MemberStatusHistory and/or SalesItemHistory.
            See enum ContactType.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDto.IsActive">
            <summary>
            If this is FALSE, the contact has been deactivated.
            Will be mapped to TIMs person status 'deactivated'.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDto.UDFAgeVerifiedFlag">
            <summary>
            Will be mapped to TIMs AgeVerifiedFlag.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactAddressDto">
            <summary>
            The primary address of the contact.
            The country will always be GERMANY.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactAddressDto.Line1">
            <summary>
            A varchar(64) that contains street name and number.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactAddressDto.City">
            <summary>
            A varchar(64) that contains the city name.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactAddressDto.PostCode">
            <summary>
            A varchar(12) that contains the ZIP code.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactCommunicationDto">
            <summary>
            The communication data of the contact.
            CatID / SubCatID
            41/1 = home phone
            41/2 = work phone
            51/1 = mobile
            61/1 = email
            71/1 = fax
            81/1 = website
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactCommunicationDto.CatID">
            <summary>
            The category ID is an INT.
            See enum ContactCategory.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactCommunicationDto.SubCatID">
            <summary>
            The sub category ID is an INT.
            See enum ContactSubCategory.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactCommunicationDto.DataValue">
            <summary>
            The data value is a varchar(64).
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactPreferenceDto">
            <summary>
            The contact preferences of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactPreferenceDto.PickListItemId">
            <summary>
            See enum PickListItem.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactPreferenceDto.IsAllowed">
            <summary>
            The value is "True" or "False".
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactPreferenceDto.EditTS">
            <summary>
            Timestamp of the contact preference, not needed for TIM.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MemberDetailDto">
            <summary>
            The member detail of the member (ContactType=3).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MemberDetailDto.MemRefNo">
            <summary>
            The ClubCentric member reference as a varchar(18).
            Not needed in TIM.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MemberDetailDto.CurrentMembershipID">
            <summary>
            The ClubCentric current membership ID.
            Saved as ExternalID.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MemberDetailDto.CurrentStatusID">
            <summary>
            This is a FK, no mapping needed.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MembershipHistoryDto">
            <summary>
            The current contract of the member (only for ContactType=3).
            For new and changed contracts, the primary subsidiary of the
            contract will be the primary subsidiary of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MembershipHistoryDto.JoinDate">
            <summary>
            The join date of the current main contract is mandatory.
            E.g. "17/08/2020 00:00:00"
            Will be mapped to Contracts.EntryBegin and Contracts.Begin.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MembershipHistoryDto.ExpiryDate">
            <summary>
            The expiry date of the current main contract is mandatory.
            "17/11/2020 00:00:00"
            Will be mapped to Contracts.End.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MembershipHistoryDto.PackageID">
            <summary>
            The ID of the package will be mapped to Contracts.ContractTemplateID.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MemberStatusHistoryDto">
            <summary>
            The current status of the members membership.
            E.g. Member, Former member, Freeze.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MemberStatusHistoryDto.StatusID">
            <summary>
            The current member status.
            Try to map to TIMs person status depending on the package type (for member, employee, freelancer etc).
            Also map the status "Cancelled" with the MemberStatusReason "Banned Members" (ID=7) to TIMs BannedFromEntryFlag.
            See enum MemberStatus.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MemberStatusHistoryDto.ReasonID">
            <summary>
            The member status reason for the current <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MemberStatusHistoryDto.StatusID"/> of the member.
            Map <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MemberStatusHistoryDto.StatusID"/> 'Cancel'
            and <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MemberStatusHistoryDto.ReasonID"/> 'Banned'
            to TIMs BannedFromEntryFlag.
            See enum MemberStatusReason.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MemberStatusHistoryDto.StartDate">
            <summary>
            The start date if the status. Is usually the current date, but can also be
            a future date if the membership hasn't started jet.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MemberStatusHistoryDto.EndDate">
            <summary>
            The end date of the status. Will be NULL if this is not a freeze.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.MemberStatusHistoryDto.EditTS">
            <summary>
            Not needed in TIM.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.SalesItemHistoryDto">
            <summary>
            A current sub contract of the customer.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.SalesItemHistoryDto.ID32">
            <summary>
            The ID of the sub contract.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.SalesItemHistoryDto.SalesItemID">
            <summary>
            The ID of the sales item, will be mapped to a ContractTemplate.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.SalesItemHistoryDto.StartDate">
            <summary>
            The start date o the sub contract.
            There is no end, because the sub contract will be renewed until
            it reaches the <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.SalesItemHistoryDto.RenewUntilDate"/> (which can be NULL).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.SalesItemHistoryDto.RenewUntilDate">
            <summary>
            The sub contract will be renewed until it reaches this date.
            This date will be NULL while the sub contract has not been
            canceled.
            When the sub contract is cancelled, this date is smaller or equal to today.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.SalesItemHistoryDto.EditTS">
            <summary>
            Time stamp of the sub contract.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDeletionAuditDto">
            <summary>
            Contains details if the person has been deleted.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDeletionAuditDto.ContactType">
            <summary>
            The type of contact as int.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDeletionAuditDto.EditTS">
            <summary>
            DateTime, when the person was last edited (prior to deletion).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDeletionAuditDto.DeletedTS">
            <summary>
            DateTime, when the person was deleted.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDeletionAuditDto.HomeSiteID">
            <summary>
            Site of the contact as int.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDeletionAuditDto.UserId">
            <summary>
            Id of the user who deleted the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ContactDeletionAuditDto.ActionID">
            <summary>
            Details as int:
            1 = Merged via the UI
            2 = Deleted via the UI
            3 = Merged via the API
            4 = Deleted via the API
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.AlertDto">
            <summary>
            Contains new and changed alerts/reminders for the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.AlertDto.ID32">
            <summary>
            The ID of the alert as INT.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.AlertDto.EditTS">
            <summary>
            The edit time stamp as DateTime.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.AlertDto.Subject">
            <summary>
            The subject of the alert.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.AlertDto.Message">
            <summary>
            The message of the alert.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.AlertDto.Severity">
            <summary>
            The severity of the alert.
            0: low
            1: medium
            2: high
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.AlertDto.IsAcknowledged">
            <summary>
            If TRUE, then the alert is acknowledged and will not be shown in TIM any more.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.AlertDto.IsActive">
            <summary>
            If FALSE, then the alert is deactivated and will not be shown in TIM any more.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.AlertDto.ActivationTime">
            <summary>
            The alert will be shown from this date on.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.AlertDto.ExpirationTime">
            <summary>
            The alert will be shown until this date.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ChargeDto">
            <summary>
            <see cref="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ExternalContactDto.Charges"/>
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ChargeDto.SiteID">
            <summary>
            The ID of the club where the charge should be created.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ChargeDto.ChargeID">
            <summary>
            Unique charge ID (needed for PayCharge API) (Int).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ChargeDto.Description">
            <summary>
            Description of the transaction (string).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ChargeDto.OutstandingAmount">
            <summary>
            The amount left to pay on the transaction (money).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ChargeDto.HeadlineAmount">
            <summary>
            The total amount of the charge (money).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ChargeDto.EditTS">
            <summary>
            The edit timestamp of the transaction (datetime).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.ChargeDto.LastEditedBy">
            <summary>
            The person who last edited the charge.
            LastEditedBy is a smallint type corresponding to the ClubCentric user id.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.Bookings.BankReturnDto">
            <summary>
            This class holds the data needed to treat a bank return.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Bookings.BankReturnDto.PersonID">
            <summary>
            The person of the bank return.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Bookings.BankReturnDto.OriginalBookingID">
            <summary>
            The booking ID of the booking that was returned by the bank.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Bookings.BankReturnDto.DueDate">
            <summary>
            The due date for the new bookings.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Bookings.BankReturnDto.ReasonForBankReturn">
            <summary>
            The reason for the bank return.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Bookings.BankReturnDto.BankFee">
            <summary>
            The fee the bank charged for the bank return.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Bookings.BankReturnDto.CompanyFee">
            <summary>
            The fee we charge for the bank return.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Bookings.BankReturnDto.CreatePersonID">
            <summary>
            The name of the employee.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Bookings.BankReturnDto.ComputerNameID">
            <summary>
            The name of the computer.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Bookings.BankReturnDto.DeactivateDebitNote">
            <summary>
            If TRUE, then debit notes will be deactivated.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Bookings.BankReturnDto.CommentCheckIn">
            <summary>
            If set, then this text will be added to Customer.CommentCheckIn.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.Bookings.BankReturnResultDto">
            <summary>
            The result for a <see cref="T:TIM.Common.CoreStandard.DTOs.Bookings.BankReturnResultDto"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Bookings.BankReturnResultDto.Message">
            <summary>
            The error message for the user.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Bookings.BankReturnResultDto.Successful">
            <summary>
            Is TRUE if the bank return was created with success.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutDto">
            <summary>
            This class is needed for automated check-in and check-out.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutDto.DeviceID">
            <summary>
            The ID of the device that was used.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutDto.ECheckInID">
            <summary>
            The GUID of the chip that was used.
            For check-in/out with a barcode, use the <see cref="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutDto.PersonID"/> instead.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutDto.PersonID">
            <summary>
            This is needed for check-in/out with a barcode instead of an <see cref="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutDto.ECheckInID"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutDto.SubsidiaryID">
            <summary>
            The subsidiary where check-in/out will take place
            (=> the subsidiary of the current computer).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutDto.TurnstileDirection">
            <summary>
            The direction of the device/turnstile.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutDto.CreatePersonID">
            <summary>
            Name of the person performing the check-in/out.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutDto.ComputerNameID">
            <summary>
            Name of the computer where the check-in/out is performed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutDto.Lockers">
            <summary>
            Optional, contains locker information for the offline locker system.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.CheckIn.LockerDto">
            <summary>
            Contains information on offline lockers.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.LockerDto.LockerInUse">
            <summary>
            Is TRUE if the locker is locked.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.LockerDto.LockerNumber">
            <summary>
            Contains the number of the locker if used (otherwise 0).
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutResultDto">
            <summary>
            The result for <see cref="T:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutDto"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutResultDto.Message">
            <summary>
            Any error message that will be displayed in TIM.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutResultDto.Successful">
            <summary>
            Is TRUE if the SP was processed with success.
            FALSE means, an error has occurred.
            This does NOT mean that check-in/out was successful.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutResultDto.ActionSuccessful">
            <summary>
            Is TRUE if the <see cref="T:TIM.Common.CoreStandard.Enums.TurnstileDirection"/> was successful and the member
            is now check-in or checked-out or passed the turnstile.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutResultDto.DisplayMessage">
            <summary>
            This message will be displayed on the device (e.g. GT7).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutResultDto.TurnstileDirection">
            <summary>
            Needed for <see cref="F:TIM.Common.CoreStandard.Enums.TurnstileDirection.InAndOut"/>,
            this specifies if a check-in or a check-out took place.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutResultDto.CashReceiptID">
            <summary>
            The ID of the cash receipt that was created on check-out and can be printed if needed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutResultDto.PersonID">
            <summary>
            The customer who checked in/out (if the key was assigned to a person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutResultDto.CheckInTime">
            <summary>
            The time and date of check-in if the person checked out.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutResultDto.CheckOutTime">
            <summary>
            The time and date of check-out if the person checked out.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutResultDto.PersonIsCheckedIn">
            <summary>
            If a person was found for the electronic key, this will be TRUE if the person currently is checked-in.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutResultDto.AlertSubContractIDs">
            <summary>
            List with the persons sub-contracts for which will be shown an alert on check-in/out.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AutomatedCheckInOutResultDto.Warnings">
            <summary>
            Any warnings that should be displayed to the employee.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.CheckIn.CheckInInformationDto">
            <summary>
            The input for an SP.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.CheckInInformationDto.PersonID">
            <summary>
            The ID of the person who wants to check in.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.CheckInInformationDto.SubsidiaryID">
            <summary>
            The subsidiary where the person wants to check in.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.CheckIn.CheckInInformationResultDto">
            <summary>
            The output for an SP.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.CheckInInformationResultDto.CheckInIsAllowed">
            <summary>
            Is TRUE if check in is possible without a warning
            (because the capacity of the subsidiary is not reached
            or because the person has an appointment or a
            course appointment).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.CheckInInformationResultDto.SubsidiaryCapacity">
            <summary>
            Detail information on the subsidiary limitation.
            Is NULL if the subsidiary has no limitation.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.CheckInInformationResultDto.Appointments">
            <summary>
            Todays appointments and course appointments of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.CheckInInformationResultDto.Message">
            <summary>
            Any possible warning for the user.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.CheckInInformationResultDto.Successful">
            <summary>
            Is TRUE if the check was completed successfully.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.CheckIn.AppointmentInformationDto">
            <summary>
            Appointment or course appointment information.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AppointmentInformationDto.AppointmentBegin">
            <summary>
            Begin date and time of the reservation.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AppointmentInformationDto.AppointmentEnd">
            <summary>
            End date and time of the reservation.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.AppointmentInformationDto.Information">
            <summary>
            Reservation information including warnings for the user.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.CheckIn.SubsidiaryCapacityDto">
            <summary>
            Subsidiary limitation information.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.SubsidiaryCapacityDto.SubsidiaryName">
            <summary>
            The name of the subsidiary.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.SubsidiaryCapacityDto.MaximumCapacity">
            <summary>
            Maximum persons allowed in this subsidiary.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.SubsidiaryCapacityDto.UsedCapacity">
            <summary>
            Number of persons that are currently in this subsidiary.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.SubsidiaryCapacityDto.RemainingCapacity">
            <summary>
            The currently remaining capacity in this subsidiary.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.SubsidiaryCapacityDto.RemainingCapacityInPercent">
            <summary>
            The currently remaining capacity in this subsidiary in percent.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.CheckIn.SubsidiaryCapacityDto.RemainingCapacityIsShort">
            <summary>
            If TRUE, then emphasize the remaining capacity because the capacity is running short.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.ContractData.SubContractCreateDto">
            <summary>
            Input data for spSubContract_Create.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ContractData.SubContractCreateDto.PersonID">
            <summary>
            Person who wants a new sub contract.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ContractData.SubContractCreateDto.ContractTemplateID">
            <summary>
            The template for the new sub contract.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ContractData.SubContractCreateDto.UsageBegin">
            <summary>
            The usage begin of the new sub contract.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ContractData.SubContractCreateDto.ContractBegin">
            <summary>
            The contact begin of the new sub contract.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ContractData.SubContractCreateDto.FirstProportionalRate">
            <summary>
            First proportional rate (for the period between usage begin and contract begin).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ContractData.SubContractCreateDto.FirstProportionalRateArticleID">
            <summary>
            The article ID for the first proportional rate.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ContractData.SubContractCreateDto.FirstProportionalRateAccountSystemLinkID">
            <summary>
            The account system for the booking of the first proportional rate.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ContractData.SubContractCreateDto.CreatePersonID">
            <summary>
            The name of the person who created the sub contract.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ContractData.SubContractCreateDto.ComputerNameID">
            <summary>
            The name of the computer where the sub contract was created.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ContractData.SubContractCreateDto.CommunicationChannelID">
            <summary>
            The channel via which the sub contract was created (<see cref="T:TIM.Common.CoreStandard.Enums.CommunicationChannel"/>).
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.ContractData.SubContractCreateResultDto">
            <summary>
            Output data for spSubContract_Create.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ContractData.SubContractCreateResultDto.Successful">
            <summary>
            Is TRUE if the sub contract was created with success.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ContractData.SubContractCreateResultDto.Message">
            <summary>
            Error message for the user.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ContractData.SubContractCreateResultDto.SubContractID">
            <summary>
            The ID of the new sub contract.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.NotificationData.SendEmailDto">
            <summary>
            Use this DTO for the SendEmailController.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.NotificationData.SendEmailDto.Message">
            <summary>
            The message of the email.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.NotificationData.SendEmailDto.Subject">
            <summary>
            The subject of the email.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.NotificationData.SendEmailDto.Email">
            <summary>
            The address of the recipient.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.NotificationData.SendEmailResultDto">
            <summary>
            This is the result for <see cref="T:TIM.Common.CoreStandard.DTOs.NotificationData.SendEmailDto"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.NotificationData.SendEmailResultDto.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.NotificationData.SendEmailResultDto.Successful">
            <summary>
            Is TRUE if the email was send.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PaymentData.CardDataDto">
             <summary>
             Holds the card data of the shopper.
             Generally, this should be encrypted card data using ADYEN client side encryption (CSE).
            
             For tests and only in the test environment this can be unencrypted card data.
             </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.CardDataDto.CardNumber">
            <summary>
            The encrypted credit card number.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.CardDataDto.ExpiryMonth">
            <summary>
            The encrypted expiry month (two digits).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.CardDataDto.ExpiryYear">
            <summary>
            The encrypted expiry year (four digits).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.CardDataDto.Cvc">
            <summary>
            The encrypted security code.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.CardDataDto.HolderName">
            <summary>
            Optional, the holder name.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PaymentData.CardPaymentDataDto">
             <summary>
             Contains the payment information for credit card payments.
             Can be used with the old and the new Adyen API.
            
             Either contains the <see cref="P:TIM.Common.CoreStandard.DTOs.PaymentData.CardPaymentDataDto.EncryptedCardData"/> with the card details (using the old Adyen API).
             Or contains the <see cref="P:TIM.Common.CoreStandard.DTOs.PaymentData.CardPaymentDataDto.Payment3DSecureVerificationData"/> with the result of the 3D secure verification (using the old Adyen API).
             Or contains the <see cref="P:TIM.Common.CoreStandard.DTOs.PaymentData.CardPaymentDataDto.CardData"/> with the card details (using the new Adyen Checkout API).
             Or contains the <see cref="P:TIM.Common.CoreStandard.DTOs.PaymentData.CardPaymentDataDto.Payment3DSecureDetails"/> with the the result of the 3D Secure verification (using the new Adyen Checkout API).
             </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.CardPaymentDataDto.EncryptedCardData">
             <summary>
             The encrypted card data of the shoppers credit card.
             Encrypted using CSE (client side encryption).
            
             Is needed for the old Adyen API.
             </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.CardPaymentDataDto.CardData">
             <summary>
             The encrypted card data of the shoppers credit card.
             Encrypted using CSE (client side encryption).
            
             Is needed for the new Adyen Checkout API.
             </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.CardPaymentDataDto.Payment3DSecureVerificationData">
             <summary>
             For PSD2 only.
             This is the 3D secure verification result after the redirect.
             This data is provided after the redirect to the bank web site.
            
             Is needed for the old Adyen Classic API.
             </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.CardPaymentDataDto.Payment3DSecureDetails">
             <summary>
             For PSD2 only.
             This data is provided if the payment needed further user action to complete the payment.
            
             Is needed for the new Adyen Checkout API.
             </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.CardPaymentDataDto.ShopperIP">
            <summary>
            The shoppers IP address.
            Mandatory for 3D secure verification.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.CardPaymentDataDto.BrowserInfo">
            <summary>
            The shoppers browser info.
            Optional, but recommended for 3D secure verification.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.CardPaymentDataDto.ReturnUrl">
             <summary>
             URL to where the shopper should be taken back to after a redirection.
             This is used for payment methods that require redirection to issuer's site,
             such as in a 3D Secure authentication flow.
            
             Only needed for the new Adyen Checkout API.
             </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.CardPaymentDataDto.Channel">
             <summary>
             The platform where a payment transaction takes place.
             This field is optional for filtering out payment methods
             that are only available on specific platforms.
            
             Possible values:
             - iOS
             - Android
             - Web
            
             Only needed for the new Adyen Checkout API.
             </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PaymentData.Payment3DSecureVerificationDataDto">
            <summary>
            Contains the result of a 3D Secure verification of a credit card payment.
            Used for the old Adyen Classic API.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.Payment3DSecureVerificationDataDto.Md">
            <summary>
            The payment session identifier returned by the card issuer.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.Payment3DSecureVerificationDataDto.PaResponse">
            <summary>
            Payment authorisation response returned by the card issuer.
            The paResponse field holds the PaRes value received from the card issuer.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PaymentData.Payment3DSecureDetailsDto">
            <summary>
            Contains the result of a 3D Secure verification of a credit card payment.
            Used for the new Adyen Checkout API.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.Payment3DSecureDetailsDto.Details">
            <summary>
            Use this collection to submit the details that
            were returned as a result of the /payments call.
            Usually is <see cref="T:TIM.Common.CoreStandard.DTOs.PaymentData.DetailsDto"/>, but can contain
            further information for 3DS2, so use object.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.Payment3DSecureDetailsDto.PaymentData">
            <summary>
            The paymentData value that you received in the
            response to the /payments call.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PaymentData.DetailsDto">
            <summary>
            Contains the details that were returned after the 3D secure verification.
            Is used in TIM-Online.
            Is needed for Adyen-Payment, so do not change properties
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.DetailsDto.MD">
            <summary>
            The payment session identifier returned by the card issuer.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.DetailsDto.PaRes">
            <summary>
            Payment authorisation response returned by the card issuer.
            The paResponse field holds the PaRes value received from the card issuer.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PaymentData.BrowserInfoDto">
            <summary>
            Contains information about the browser of the shopper.
            Is needed for 3D secure verification.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PaymentData.RedirectFor3DSecureDto">
            <summary>
            This class represents part of the result of an Adyen payment
            using the Checkout-API '/payments'.
            This data is needed for further actions when a payment could not be completed,
            for example for 3D-Secure where the shopper needs to take further actions.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.RedirectFor3DSecureDto.Action">
            <summary>
            Action to be taken for completing the payment.
            Type is TIM.Database.ExternalPayments.DTOs.Action (which can not be referenced).
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PaymentData.RedirectFor3DSecureVerificationDto">
            <summary>
            This data is provided for credit card payments with 3D secure verification (PSD2).
            To finalize the payment, redirect the user to the <see cref="P:TIM.Common.CoreStandard.DTOs.PaymentData.RedirectFor3DSecureVerificationDto.IssuerUrl"/>
            and append <see cref="P:TIM.Common.CoreStandard.DTOs.PaymentData.RedirectFor3DSecureVerificationDto.Md"/> and <see cref="P:TIM.Common.CoreStandard.DTOs.PaymentData.RedirectFor3DSecureVerificationDto.PaRequest"/>.
            For more information, see https://docs.adyen.com/classic-integration/3d-secure/3d-secure-1/
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.RedirectFor3DSecureVerificationDto.IssuerUrl">
            <summary>
            URL to where you should redirect the shopper
            to complete a 3D Secure 1 or 3D Secure 2 authentication.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.RedirectFor3DSecureVerificationDto.Md">
            <summary>
            A payment session identifier returned by the card issuer.
            Needed for the redirect.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.RedirectFor3DSecureVerificationDto.PaRequest">
            <summary>
            Holds the 3D Secure request data for the issuer.
            Needed for the redirect.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PaymentData.CardRequest">
            <summary>
            Used to check the adyen card data before submitting form.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PaymentData.OnlinePaymentDto">
            <summary>
            Use this class to execute an online payment.
            Response has to be <see cref="T:TIM.Common.CoreStandard.DTOs.PaymentData.OnlinePaymentResultDto"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.OnlinePaymentDto.PersonID">
            <summary>
            The number of the person executing the payment.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.OnlinePaymentDto.Amount">
            <summary>
            The amount that will be payed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.OnlinePaymentDto.EncryptedCardData">
            <summary>
            The encrypted card data of the person. Only set for credit card payment, not for pay pal payment.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.OnlinePaymentDto.CardPaymentData">
            <summary>
            Contains the credit card data.
            With or without PSD2 / 3D authorization.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.OnlinePaymentDto.ExternalPaymentMode">
            <summary>
            The payment mode that was selected and matches the card data. See <see cref="T:TIM.Common.CoreStandard.Enums.ExternalPaymentMode"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.OnlinePaymentDto.CommunicationChannel">
            <summary>
            Specifies if the payment was made via the app or the web site. See <see cref="T:TIM.Common.CoreStandard.Enums.CommunicationChannel"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.OnlinePaymentDto.RedirectPathToCheckPayPalPayment">
            <summary>
            <see cref="P:TIM.Common.CoreStandard.Interfaces.Online.IPayPalRedirect.RedirectPathToCheckPayPalPayment"/>
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.OnlinePaymentDto.LocalHostUrlForDebugging">
            <summary>
            <see cref="P:TIM.Common.CoreStandard.Interfaces.Online.IPayPalRedirect.LocalHostUrlForDebugging"/>
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PaymentData.OnlinePaymentResultDto">
            <summary>
            This is the result of an OnlinePayment.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.OnlinePaymentResultDto.Successful">
            <summary>
            Is TRUE if  the payment was successful.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.OnlinePaymentResultDto.Message">
            <summary>
            Any error message for the user.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.OnlinePaymentResultDto.PayPalRequestUrl">
            <summary>
            <see cref="P:TIM.Common.CoreStandard.Interfaces.Online.IPayPalResult.PayPalRequestUrl"/>
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.OnlinePaymentResultDto.RedirectFor3DSecureVerification">
            <summary>
            For credit card payment with 3D secure verification only.
            If set, then a redirect is necessary to finalize the payment.
            Contains the information for the redirect.
            Needed for old Adyen Classic API.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.OnlinePaymentResultDto.RedirectFor3DSecure">
            <summary>
            For credit card payment with 3D secure verification only.
            If set, then a redirect is necessary to finalize the payment.
            Contains the information for the redirect.
            Needed for new Adyen Checkout API.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PaymentData.PayPalPaymentDto">
            <summary>
            Represents a PayPal payment.
            Is used in Database and App.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.PayPalPaymentDto.PersonProfileID">
            <summary>
            Needed to verify the user.
            Only if user is logged in, otherwise use <see cref="P:TIM.Common.CoreStandard.DTOs.PaymentData.PayPalPaymentDto.PersonID"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.PayPalPaymentDto.IdentificationCode">
            <summary>
            Needed to verify the user.
            Only if user is logged in, otherwise use <see cref="P:TIM.Common.CoreStandard.DTOs.PaymentData.PayPalPaymentDto.PersonID"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.PayPalPaymentDto.PersonID">
            <summary>
            Alternative to <see cref="P:TIM.Common.CoreStandard.DTOs.PaymentData.PayPalPaymentDto.PersonProfileID"/> and <see cref="P:TIM.Common.CoreStandard.DTOs.PaymentData.PayPalPaymentDto.IdentificationCode"/>.
            Needed to verify the user if the person is NOT logged in.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.PayPalPaymentDto.ExternalPaymentPendingPaymentID">
            <summary>
            Needed to identify the pending payment.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.PayPalPaymentDto.PayPalResponseUrl">
            <summary>
            The URL to be verified.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.PayPalPaymentDto.PaymentFailed">
            <summary>
            Set to TRUE if the payment was abandoned or refused, then the appointment and the pending payment will be canceled.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.PayPalPaymentDto.PaymentAuthorized">
            <summary>
            Returns TRUE if the PayPalResponseUrl identifies a valid payment.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.PayPalPaymentDto.ErrorMessage">
            <summary>
            Returns any error message.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.PayPalPaymentDto.WebSiteUrlForAppointments">
            <summary>
            Returns the url of the web site, so that after the PayPal-payment, a redirect to the parent page is possible
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.PayPalPaymentDto.WebSiteUrlForDashboard">
            <summary>
            Returns the url of the web site, so that after the PayPal-payment, a redirect to the parent page is possible
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PaymentData.VerifyCardDto">
            <summary>
            Use this DTO to verify if a credit card is valid.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.VerifyCardDto.CardData">
            <summary>
            The card data to be verified.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.VerifyCardDto.SubsidiaryID">
            <summary>
            The subsidiary for which the payment takes place.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PaymentData.VerifyCardResultDto">
            <summary>
            This is the result for a card verification request.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.VerifyCardResultDto.Message">
            <summary>
            Any error message.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.VerifyCardResultDto.Successful">
            <summary>
            Is true if no error occured. Card might not be valid though.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.VerifyCardResultDto.CardIsValid">
            <summary>
            True if the card data is valid.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PaymentData.VerifyCardResultDto.PaymentResultUserInfo">
            <summary>
            A message for the user if the card is not valid.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ImportCredits.ImportCreditsDto.CountImports">
            <summary>
            Counts the number of credit imports.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ImportCredits.ImportCreditsDto.SumAmount">
            <summary>
            Sums the amount of all credit imports.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ImportCredits.ImportCreditsDto.CreatePersonID">
            <summary>
            The name of the person initializing the import.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.ImportCredits.ImportCreditsDto.ComputerName">
            <summary>
            Name of the computer where the import is initialized.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.InterestData.SetPersonInterestsDTO">
            <summary>
            Adds interests to a person profile.
            Is used in Database and App.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.InterestData.SetPersonInterestsDTO.PersonProfileID">
            <summary>
            Person profile ID to which the interests should be added.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.InterestData.SetPersonInterestsDTO.PersonID">
            <summary>
            PersonID matching the person profile ID (for validation only)
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.InterestData.SetPersonInterestsDTO.AssignAutomatically">
            <summary>
            Is TRUE if the privacy policy was accepted. Automatically add interest details with flag InterestDetail.AssignAutomaticallyToPersonFlag.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.InterestData.SetPersonInterestsDTO.ArticleID">
            <summary>
            Is set if a course was added as favorite or if an appointment or a course schedule was reserved.
            Automatically add interest details of the article.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.InterestData.SetPersonInterestsResultDTO">
            <summary>
            Represents the result of <see cref="T:TIM.Common.CoreStandard.DTOs.InterestData.SetPersonInterestsDTO"/>.
            Is used in Database and App.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.InterestData.SetPersonInterestsResultDTO.PersonInterestsAddedCount">
            <summary>
            Number of person interests that where added.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.InterestData.SetPersonInterestsResultDTO.ErrorMessage">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonData.ConsumptionAccountBalanceDto">
            <summary>
            This class splits the consumption account of a person into credits and debits.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.ConsumptionAccountBalanceDto.PersonID">
            <summary>
            The person of the consumption account.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.ConsumptionAccountBalanceDto.TotalBalance">
            <summary>
            The total balance on the account (including all bookings).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.ConsumptionAccountBalanceDto.RestrictedCredits">
            <summary>
            The sum of all remaining restricted credits.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.ConsumptionAccountBalanceDto.UnrestrictedCredits">
            <summary>
            The sum of all remaining unrestricted credits.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.ConsumptionAccountBalanceDto.OpenBalance">
            <summary>
            The sum of all open bookings that are not credits.
            This can be a credit or a debit.
            A credit could be restricted or unrestricted.
            A debit could be payed with restricted or unrestricted credits.
            So we can not combine the open balance with any credits at this moment.
            Once a cash receipt is created, the open balance will be 0,00.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.DTOs.PersonData.ConsumptionAccountBalanceDto.#ctor(System.Int64,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonData.UpdatePersonDataDto">
            <summary>
            This is the main class, that will be transfered between the clients.
            This class holds the data that will be changed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.UpdatePersonDataDto.PersonID">
            <summary>
            The ID of the person whose data will be changed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.UpdatePersonDataDto.ContactData">
            <summary>
            The optional contact data, that will be changed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.UpdatePersonDataDto.BankData">
            <summary>
            The optional bank data, that will be changed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.UpdatePersonDataDto.AddressData">
            <summary>
            The optional address data, that will be changed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.UpdatePersonDataDto.PersonData">
            <summary>
            The optional person data, that will be changed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.UpdatePersonDataDto.RechargeAccount">
            <summary>
            The optional recharge consumption account data, that will be changed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.UpdatePersonDataDto.Settings">
            <summary>
            The optional person settings, that will be changed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.UpdatePersonDataDto.CommunicationChannelID">
            <summary>
            The communication channel that was used to change the person data.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonData.UpdatePersonDataResultDto">
            <summary>
            This class represents the result, whether the changes could be saved or not.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.UpdatePersonDataResultDto.Successful">
            <summary>
            Is TRUE, if all changes could be saved successfully.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.UpdatePersonDataResultDto.Message">
            <summary>
            If the changes could not be saved, this is the error message for the user.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonData.ContactDataDto">
            <summary>
            Represents the persons contact data, that should be changed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.ContactDataDto.Phone1">
            <summary>
            The main phone number.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.ContactDataDto.Phone2">
            <summary>
            The work phone number.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.ContactDataDto.Mobile">
            <summary>
            The mobile phone number.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonData.BankDataDto">
            <summary>
            Represents the persons bank data, that should be changed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.BankDataDto.BankAccountOwner">
            <summary>
            The name of the bank account owner.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.BankDataDto.Iban">
            <summary>
            The IBAN of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.BankDataDto.BankName">
            <summary>
            The name of the bank corresponding the IBAN.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonData.AddressDataDto">
            <summary>
            Represents the persons address data, that should be changed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.AddressDataDto.TitleID">
            <summary>
            The title of the person, see <see cref="T:TIM.Common.CoreStandard.Enums.Title"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.AddressDataDto.Street">
            <summary>
            Street and street number.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.AddressDataDto.ZIP">
            <summary>
            The ZIP of the city.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.AddressDataDto.City">
            <summary>
            The name of the city.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.AddressDataDto.CountryID">
            <summary>
            The country ID, see tblCountries.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonData.PersonDataDto">
            <summary>
            Represents the persons other data, that should be changed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.PersonDataDto.DateOfBirth">
            <summary>
            The optional date of birth of the person.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonData.RechargeAccountDto">
            <summary>
            Represents the customer data with the recharge details for the consumption account.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.RechargeAccountDto.RechargeConsumptionAccount">
            <summary>
            Only if TRUE, the consumption account will be recharged automatically.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.RechargeAccountDto.RechargeMinimumBaseAmount">
            <summary>
            The minimum base amount for the recharge. If the account balance drops below this amount, the account will be recharged.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.RechargeAccountDto.RechargeAmount">
            <summary>
            The amount of the recharge of the consumption account.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonData.SettingsDto">
            <summary>
            Represents settings of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.SettingsDto.AllowsNewsletter">
            <summary>
            Allows to change the value if the person wants to receive out newsletter.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonData.SettingsDto.AllowsContact">
            <summary>
            Allows to change the value if the person allows to be contacted for commercial reasons.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPersonProfileDto">
            <summary>
            Use this dto to verify a password or to check if the profile of the given profile data is still valid.
            Is used in the app to get the token.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPersonProfileDto.CheckPassword">
            <summary>
            Optional, set this DTO to check the password. Also checks the profile.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPersonProfileDto.CheckProfile">
            <summary>
            Optional, set this DTO to check a profile.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPasswordDto">
            <summary>
            Finds the profile, either by the PersonID or by the EncryptedPersonID or by the Email and checks the password. Also checks if the profile is valid.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPasswordDto.PersonID">
            <summary>
            Optional person id.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPasswordDto.EncryptedPersonID">
            <summary>
            Optional encrypted person id.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPasswordDto.Email">
            <summary>
            Optional email address.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPasswordDto.Password">
            <summary>
            The password to be verified.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckProfileDto">
            <summary>
            Finds a profile either by the <see cref="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckProfileDto.EncryptedProfileData"/> or by the <see cref="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckProfileDto.ProfileData"/> and checks if the profile is valid.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckProfileDto.EncryptedProfileData">
            <summary>
            Optional, checks if the person profile is valid.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckProfileDto.ProfileData">
            <summary>
            Optional, checks if the person profile is valid.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckProfileDataDto">
            <summary>
            Profile is identified by the <see cref="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckProfileDataDto.PersonProfileID"/> and the <see cref="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckProfileDataDto.IdentificationCode"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckProfileDataDto.PersonProfileID">
            <summary>
            The person profile id to be verified.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckProfileDataDto.IdentificationCode">
            <summary>
            The identification code matching the person profile ID.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPersonProfileResultDto">
            <summary>
            The result of <see cref="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPersonProfileDto"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPersonProfileResultDto.Result">
            <summary>
            Is TRUE if the profile is valid.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPersonProfileResultDto.PersonProfileID">
            <summary>
            The person profile id.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPersonProfileResultDto.EncryptedProfileData">
            <summary>
            The encrypted profile data for the token.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPersonProfileResultDto.InternalErrorMessage">
            <summary>
            Any internal error message with verification details, do NOT show to user.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPersonProfileResultDto.Message">
            <summary>
            This field is currently not used.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPersonProfileLightDto">
            <summary>
            Used in the App to Check if PersonProfile was transferred to other Person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPersonProfileLightDto.PersonID">
            <summary>
            PersonID of currently logged in Person
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPersonProfileLightResultDto">
            <summary>
            The result for <see cref="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPersonProfileLightDto"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPersonProfileLightResultDto.Message">
            <summary>
            Contains error message if not Successful
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPersonProfileLightResultDto.Successful">
            <summary>
            Indicated if the PersonProfile fits the previously given PersonID
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckPersonProfileLightResultDto.IsConnectedToInternetFlag">
            <summary>
            Indicated if a connection to the database could be established
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.CreateProfileDto">
            <summary>
            This is the input data for spPersonProfile_CreateProfile
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CreateProfileDto.PersonID">
            <summary>
            The person for whom a profile will be created.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CreateProfileDto.Email">
            <summary>
            Allows to set an email address if the profile does not have one.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CreateProfileDto.CommunicationChannelID">
            <summary>
            The <see cref="T:TIM.Common.CoreStandard.Enums.CommunicationChannel"/> from where the profile was created.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CreateProfileDto.UserName">
            <summary>
            The name of the employee.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.CreateProfileResultDto">
            <summary>
            This is the output data for <see cref="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.CreateProfileDto"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CreateProfileResultDto.Message">
            <summary>
            The error message if the action was not successful.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CreateProfileResultDto.Successful">
            <summary>
            True if the action was successful.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.CreateProfilePersonDataDto">
            <summary>
            The person data needs to be supplied when a new profile is created.
            Used by WebSite and App.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CreateProfilePersonDataDto.CreateByNameLoginStep">
            <summary>
            This is needed for the app (two pages)
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.ExternalCreateProfileDto">
            <summary>
            Allows an external system to create a profile.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.ExternalCreateProfileDto.ExternalID">
            <summary>
            The contact guid of the person in the external system.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.ExternalCreateProfileDto.Email">
            <summary>
            The email address of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.ExternalCreateProfileDto.Password">
            <summary>
            The password for the profile.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.ExternalCreateProfileResultDto">
            <summary>
            The result for <see cref="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.ExternalCreateProfileDto"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.ExternalCreateProfileResultDto.ExternalCreateProfileResultID">
            <summary>
            The result, see <see cref="T:TIM.Common.CoreStandard.Enums.ExternalCreateProfileResult"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.ExternalCreateProfileResultDto.Message">
            <summary>
            Any message for the user.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.ExternalCreateProfileResultDto.Successful">
            <summary>
            Is TRUE if no error occurred. See <see cref="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.ExternalCreateProfileResultDto.ExternalCreateProfileResultID"/> for more details.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginDataDto">
            <summary>
            The login data is needed for login and to set/change the password.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginDataDto.ValidatePerson">
            <summary>
            This field is needed when a validation code needs to be verified.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginDataDto.Email">
            <summary>
            Email address for login.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginDataDto.Password">
            <summary>
            Password for login.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginDataDto.ValidationCode">
            <summary>
            Validation code to set/change password.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginDataDto.NewPassword">
            <summary>
            New password.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginDto.LoginAction">
            <summary>
            The action to be executed (<see cref="T:TIM.Common.CoreStandard.Enums.LoginAction"/>).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginDto.CreateProfilePersonData">
            <summary>
            The person data needs to be supplied when a new profile is created.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginDto.LoginData">
            <summary>
            The login data needs to be supplied for login with existing profile or to set/change the password.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginDto.CommunicationChannelID">
            <summary>
            The source of the login, see enum CommunicationChannel.
            Is used in tblPersonProfiles to know, from where the profile was created.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginResultDto.ResultCode">
            <summary>
            The Result of the login process (<see cref="T:TIM.Common.CoreStandard.Enums.LoginResultCode"/>).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginResultDto.ResultMessage">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginResultDto.ErrorMessage">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginResultDto.ValidatePerson">
            <summary>
            Will be returned if a validation code was sent.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginResultDto.Profile">
            <summary>
            Person profile data is set if login was successful.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginResultDto.Message">
            <summary>
            The corresponding message of the <see cref="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginResultDto.ResultCode"/>.
            Will be shown to the user.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginResultDto.Token">
            <summary>
            The JSON Web Token (JWT) that can be used for authorization and authentication on the website.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginResultDto.TokenUsableToUtc">
            <summary>
            Until this moment the token can be used by the website to identify a user.
            This will leave enough time for the user to access personal content until the token finally expires.
            The date is in UTC.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginResultDto.Successful">
            <summary>
            Is TRUE if the <see cref="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.LoginResultDto.ResultCode"/> is <see cref="F:TIM.Common.CoreStandard.Enums.LoginResultCode.OK"/>.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.ProfileDto">
            <summary>
            The profile will be returned if the login was successful.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.ProfileDto.PersonID">
            <summary>
            Person id.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.ProfileDto.FirstName">
            <summary>
            First name.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.ProfileDto.LastName">
            <summary>
            Last name.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.ProfileDto.IsEmployee">
            <summary>
            Returns TRUE if this person is an employee.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.ProfileDto.PersonProfileID">
            <summary>
            Person profile id.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.ProfileDto.IdentificationCode">
            <summary>
            Person profile identification code.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckIdentificationCodeDto">
            <summary>
            This class is needed to reset the identification code for invalid person profiles
            (i.e. containing invalid characters).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckIdentificationCodeDto.PersonProfileID">
            <summary>
            The ID of the person profile for whom you want to correct the identification code.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckIdentificationCodeDto.IdentificationCode">
            <summary>
            The identification code you want to check.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckIdentificationCodeResultDto">
            <summary>
            The result for <see cref="T:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckIdentificationCodeResultDto"/>.
            Attention, there is a copy of this DTO in the app (a reference was not possible).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckIdentificationCodeResultDto.Message">
            <summary>
            Any error message.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckIdentificationCodeResultDto.Successful">
            <summary>
            Is TRUE if no error occured.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckIdentificationCodeResultDto.IdentificationCodeWasChanged">
            <summary>
            Is TRUE if the identification code was invalid and has been changed.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckIdentificationCodeResultDto.IdentificationCodeIsMatching">
            <summary>
            Is TRUE if the identification code is matching the profile.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckIdentificationCodeResultDto.NewIdentificationCode">
            <summary>
            Contains the new identification code if <see cref="P:TIM.Common.CoreStandard.DTOs.PersonProfileData.CheckIdentificationCodeResultDto.IdentificationCodeWasChanged"/> is TRUE.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PersonProfileLoginData.LoginOrCreateProfileResultDto">
            <summary>
            This class is used to create a profile from the app.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileLoginData.LoginOrCreateProfileResultDto.CreateByEmailDto">
            <summary>
            The result if the profile was created by email.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileLoginData.LoginOrCreateProfileResultDto.CreateByPersonIdDto">
            <summary>
            The result if the profile was created by person id.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileLoginData.LoginOrCreateProfileResultDto.CreateByNameDto">
            <summary>
            The result if the profile was created by name and address.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileLoginData.LoginOrCreateProfileResultDto.ProfileLoginResultDto">
            <summary>
            The result if a person tries to log in or change the password.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileLoginData.LoginOrCreateProfileResultDto.LoginAction">
            <summary>
            The initial login action.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileLoginData.LoginOrCreateProfileResultDto.Message">
            <summary>
            Any error or exception.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileLoginData.ProfileLoginResultDto.PersonExists">
            <summary>
            Returns TRUE if a person was found.
            Probably always returns FALSE. Obsolete?
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileLoginData.ProfileLoginResultDto.PersonID">
            <summary>
            The ID of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileLoginData.ProfileLoginResultDto.PersonFirstName">
            <summary>
            The first name of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileLoginData.ProfileLoginResultDto.PersonLastName">
            <summary>
            The last name of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileLoginData.ProfileLoginResultDto.PersonProfileID">
            <summary>
            The profile ID of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileLoginData.ProfileLoginResultDto.IdentificationCode">
            <summary>
            The identification code of the profile of the person.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileLoginData.ProfileLoginResultDto.ValidateCodeResult">
            <summary>
            The <see cref="T:TIM.Common.CoreStandard.Enums.ValidateCodeResult"/> of the login.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PersonProfileLoginData.ProfileLoginResultDto.ResultText">
            <summary>
            A massage that can be displayed to the user.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PointOfSalesData.BookingDto">
            <summary>
            This DTO represents a booking.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.BookingDto.BookingID">
            <summary>
            The ID of the booking.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.BookingDto.Description">
            <summary>
            The description of the booking.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.BookingDto.Amount">
            <summary>
            The amount of the booking.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CalculateUseableCreditAmountDto.PersonID">
            <summary>
            Id of the person for whom you want to get the credit bookings.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CalculateUseableCreditAmountDto.CreditBookings">
            <summary>
            List of bookings to be analyzed.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreateCashReceiptDto">
            <summary>
            This DTO is used for spCreateCashReceipt_V2.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreateCashReceiptDto.PersonID">
            <summary>
            The ID of the person for whom the cash receipt will be created.
            Optional, can be NULL for walk in customers.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreateCashReceiptDto.CheckInID">
            <summary>
            Optional. If the person is checked in, then the <see cref="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreateCashReceiptDto.CheckInID"/> will be displayed on the cash receipt.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreateCashReceiptDto.UsedCredits">
            <summary>
            Optional, can be NULL. These are the credits that will be used for the cash receipt.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreateCashReceiptDto.CreatePersonID">
            <summary>
            The name of the employee is needed for any bookings that might have to be created.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreateCashReceiptDto.ComputerNameID">
            <summary>
            The computer name is needed to identify the walk in customer bookings of a computer and for any bookings that might have to be created.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreateCashReceiptDto.ComputerSubsidiaryID">
            <summary>
            The subsidiaryID is needed for any bookings that might have to be created.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreateCashReceiptOutputDto">
            <summary>
            This dto is used for spCreateCashReceipt_V2.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreateCashReceiptOutputDto.Successful">
            <inheritdoc />
            <summary>
            Is TRUE if the cash receipt could be created.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreateCashReceiptOutputDto.Message">
            <inheritdoc />
            <summary>
            Any error message for the user if the cash receipt could not be created.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreateCashReceiptOutputDto.CashReceiptID">
            <summary>
            The ID of the new cash receipt.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreateCashReceiptOutputDto.CashReceiptEmailSent">
            <summary>
            If true, the cash receipt was send as email
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreatePendingPaymentDto.PersonID">
            <summary>
            The person for whom a PendingPayment will be created.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreatePendingPaymentDto.SubsidiaryID">
            <summary>
            The subsidiary where the payment is created.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreatePendingPaymentDto.PendingPaymentReasonID">
            <summary>
            The <see cref="T:TIM.Common.CoreStandard.Enums.PendingPaymentReason"/>, needed for the booking description.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreatePendingPaymentDto.Amount">
            <summary>
            The amount for the PendingPayment. A positive amount will be refunded, a negative amount will be debited.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreatePendingPaymentDto.CreateCashReceipt">
            <summary>
            TRUE if a CashReceipt should be created.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreatePendingPaymentDto.CreatePersonID">
            <summary>
            The name of the employee.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreatePendingPaymentDto.ComputerNameID">
            <summary>
            The name of the computer.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreditBookingDto">
            <summary>
            This DTO represents an open credit booking of the person, including all the open consumption bookings of the person that can be payed with this credit.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreditBookingDto.BookingID">
            <summary>
            The booking ID of the credit booking.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreditBookingDto.Description">
            <summary>
            The description of the credit booking.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreditBookingDto.Amount">
            <summary>
            The amount of the credit.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreditBookingDto.ConsumptionBookings">
            <summary>
            List with bookings that can be payed with this credit
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.CreditBookingDto.AllowPayout">
            <summary>
            If TRUE, then the credit can be payed out and has no restrictions.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.GetCreditBookingsOfPersonOutputDto.Successful">
            <inheritdoc />
            <summary>
            <see cref="P:TIM.Common.CoreStandard.Interfaces.Online.IOutputDto.Successful"/>
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.GetCreditBookingsOfPersonOutputDto.Message">
            <inheritdoc />
            <summary>
            <see cref="P:TIM.Common.CoreStandard.Interfaces.Online.IResultDto.Message"/>
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.GetCreditBookingsOfPersonOutputDto.Credits">
            <summary>
            Contains the credit bookings and amount that can be used for the cash receipt.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.GetCreditBookingsOfPersonOutputDto.CreditsAreAmbiguous">
            <summary>
            Returns TRUE if an booking can be payed with different credits having different restraints.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.GetCreditBookingsOfPersonOutputDto.CreditsWithUseableAmount">
            <summary>
            Contains the <see cref="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.GetCreditBookingsOfPersonOutputDto.Credits"/> with the amounts, that can actually be used.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.PointOfSalesData.ValidatedCreditBookingDto">
            <summary>
            This DTO represents an open credit booking of the person that has been validated
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.ValidatedCreditBookingDto.AmountUsed">
            <summary>
            The amount of the credit that will be used.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.ValidatedCreditBookingsOfPersonOutputDto.Successful">
            <inheritdoc />
            <summary>
            <see cref="P:TIM.Common.CoreStandard.Interfaces.Online.IOutputDto.Successful"/>
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.ValidatedCreditBookingsOfPersonOutputDto.Message">
            <inheritdoc />
            <summary>
            <see cref="P:TIM.Common.CoreStandard.Interfaces.Online.IResultDto.Message"/>
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.PointOfSalesData.ValidatedCreditBookingsOfPersonOutputDto.Credits">
            <summary>
            Contains the credit bookings and amount that can be used for the cash receipt.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodActionDto">
            <summary>
            This data is needed to check, create, change or delete a rest period.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodActionDto.RestPeriodAction">
            <summary>
            Allows to create, change or delete a rest period.
            Use enum <see cref="T:TIM.Common.CoreStandard.Enums.RestPeriodAction"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodActionDto.CheckOnly">
            <summary>
            If TRUE, then the rest period data will only be checked.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodActionDto.PersonID">
            <summary>
            The person of the rest period.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodActionDto.ModifyRestPeriodID">
            <summary>
            The ID of the rest period that will be modified or deleted.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodActionDto.RestPeriodDates">
            <summary>
            The dates for a new (of modified) rest period.
            Not needed if a rest period is deleted (<see cref="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodActionDto.RestPeriodAction"/>).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodActionDto.RestPeriodDetails">
            <summary>
            The details for a new (or modified) rest period.
            Not needed if a rest period is checked (<see cref="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodActionDto.CheckOnly"/>).
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodActionDto.Remark">
            <summary>
            Remark for the rest period and the history.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodActionDto.DateOfRequest">
            <summary>
            Date when the demand for the rest period was received.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodActionDto.CreateHistoryEntry">
            <summary>
            Allows to skip creation of history entry, since documents have to be added by Admin.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodActionDto.CreatePersonID">
            <summary>
            The name of the employee who creates/changes the rest period.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodActionDto.ComputerNameID">
            <summary>
            The name of the computer where the rest period was created/changed.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodDatesDto">
            <summary>
            The dates are needed to create or change a rest period.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodDatesDto.FromDate">
            <summary>
            The start date of the rest period.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodDatesDto.ToDate">
            <summary>
            The end date of the rest period.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodDetailsDto">
            <summary>
            The details are needed to create or change a rest period.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodDetailsDto.RestPeriodCriteriaID">
            <summary>
            The reason for the rest period.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodDetailsDto.ExtendsContract">
            <summary>
            Defines if the end date of the contract (and the follow contracts)
            will be extended for the duration of the rest period..
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodDetailsDto.Fee">
            <summary>
            One time fee for the creation of the rest period.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodDetailsDto.PeriodicRate">
            <summary>
            Periodic rate that will be booked instead of the periodic contract rate.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodActionResultDto">
            <summary>
            The result for a <see cref="T:TIM.Common.CoreStandard.DTOs.Restperiods.RestPeriodActionDto"/>.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.SubsidiaryData.SubsidiaryCapacityDto">
            <summary>
            This DTO transfers subsidiary data.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.SubsidiaryData.SubsidiaryCapacityDto.SubsidiaryID">
            <summary>
            The ID of the subsidiary.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.SubsidiaryData.SubsidiaryCapacityDto.SubsidiaryName">
            <summary>
            The name of the subsidiary.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.SubsidiaryData.SubsidiaryCapacityDto.RemainingCapacity">
            <summary>
            The currently remaining capacity of the subsidiary.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.SubsidiaryData.SubsidiaryCapacityDto.MaxCapacity">
            <summary>
            The maximum capacity of the subsidiary.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.SubsidiaryData.SubsidiaryCapacityDto.CapacityUtilization">
            <summary>
            The currently remaining capacity of the subsidiary as a category.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.SubsidiaryData.SubsidiaryCapacityDto.Areas">
            <summary>
            The capacities of the different areas of the subsidiary.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.SubsidiaryData.AreaCapacityDto">
            <summary>
            This DTO transfers details for the areas of a subsidiary.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.SubsidiaryData.AreaCapacityDto.AreaID">
            <summary>
            The ID of the area.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.SubsidiaryData.AreaCapacityDto.AreaName">
            <summary>
            The name of the area.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.SubsidiaryData.AreaCapacityDto.RemainingCapacity">
            <summary>
            The currently remaining capacity of the area.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.SubsidiaryData.AreaCapacityDto.MaxCapacity">
            <summary>
            The maximum capacity of the area.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.SubsidiaryData.AreaCapacityDto.CapacityUtilization">
            <summary>
            The currently remaining capacity of the area as a category.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.Test.TestInputDto">
            <summary>
            Input value for spTestInput.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Test.TestInputDto.Input">
            <summary>
            A string that will be copied into <see cref="P:TIM.Common.CoreStandard.DTOs.Test.TestOutputDto.Output"/>.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.DTOs.Test.TestOutputDto">
            <summary>
            Output value for <see cref="T:TIM.Common.CoreStandard.DTOs.Test.TestInputDto"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Test.TestOutputDto.CountSubsidiaries">
            <summary>
            Counts the subsidiaries in the MatrixZero DB.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Test.TestOutputDto.CountClubMappings">
            <summary>
            Counts the clubs in the DavidLloyd DB.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.DTOs.Test.TestOutputDto.Output">
            <summary>
            This is a copy of <see cref="P:TIM.Common.CoreStandard.DTOs.Test.TestInputDto.Input"/>.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ExternalCreateProfileResult">
            <summary>
            This enum defines the result when a profile is created via the external API.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ExternalCreateProfileResult.Error">
            <summary>
            General error occurred.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ExternalCreateProfileResult.PersonNotFound">
            <summary>
            The person was not found and thus the profile could not be created.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ExternalCreateProfileResult.ProfileCreated">
            <summary>
            A new profile was created (with the provided password or, if missing, a random password).
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ExternalCreateProfileResult.PasswordUpdated">
            <summary>
            A profile already existed, but the password was updated.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ExternalCreateProfileResult.ProfileNotChanged">
            <summary>
            A profile already existed, the password was not changed.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.VendingDeviceCheckInType">
            <summary>
            tblVendingDeviceCheckInTypes
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ServiceBusQueue">
            <summary>
            Allows to distinguish the AZURE service bus queues.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ServiceBusQueue.Standard">
            <summary>
            Use this queue for all changes that need to be transferred immediately.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ServiceBusQueue.Cron">
            <summary>
            Use this queue for the monthly cron that will update many members but can take it's time.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ServiceBusAction">
            <summary>
            This action is needed for TIMServiceBusException.
            It allows to define the action for the service bus message.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ServiceBusAction.CompleteMessage">
            <summary>
            The message will be marked as completed, but the error will be logged.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ServiceBusAction.AbandonMessage">
            <summary>
            The message will be abandoned and the error will be logged. The connection to the bus will not be closed.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ServiceBusAction.AbandonMessageAndCloseBus">
            <summary>
            The message will be abandoned, the error will be logged and the connection to the bus will be closed.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.PersonAction">
            <summary>
            This enum allows to distinguish if a person was inserted, updated or deactivated.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ExternalSyncLogAction">
            <summary>
            tblExternalSyncLogActions
            This is needed for tblExternalSyncLog.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ExternalSyncLogResult">
            <summary>
            tblExternalSyncLogResults
            This is needed for tblExternalSyncLog.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.CapacityUtilization">
            <summary>
            Use this enum to define the current capacity utilization of subsidiaries.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.CheckInDirection">
            <summary>
            Use this enum in tblPersonCheckInRFIDs.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.SendValidationCodeBy">
            <summary>
            Use this enum for the validation code for PersonProfiles.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.DateType">
            <summary>
            Use this enum to distinguish Booking.DueDate and Booking.PerformanceDate.
            The value equals the index of the cbx.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ReportSource">
            <summary>
            tblReportSources. Only ID 0 is an enum, all other can change.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ReportMapping">
            <summary>
            tblReportMappings
            No values for ReportMappingFormID 1+2
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ReportMappingForm">
            <summary>
            tblReportMappingForms
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.SepaPaymentBookingType">
            <summary>
            tblSepaPaymentBookingsTypes
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.PendingPaymentReason">
            <summary>
            tblPendingPaymentReasons
            Represents the reason, why the pending payment (tblPendingPayments) was created.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.TokenSource">
            <summary>
            This enum is used in the claims of JWT tokens.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.PushNotificationTag">
            <summary>
            Represents tblPushNotificationTags.
            The tags must also be set in Azure in the Push-Settings of the App Service (otherwise they can not be set from within the app).
            The tag names must match the tag names in Azure.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.Sex">
            <summary>
            Gender of a person. Often represented as boolean. Better use <see cref="T:TIM.Common.CoreStandard.Enums.Gender"/>.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.Gender">
            <summary>
            Gender of a person. Often represented as boolean.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.LoginAction">
            <summary>
            Login action for PersonProfileController.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.LoginResultCode">
            <summary>
            Login result for PersonProfileController.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.MergeFieldArea">
            <summary>
            tblMergeFieldAreas
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ValidateCodeResult">
            <summary>
            Result of validating code for PersonProfileController.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ExternalPaymentStatus">
            <summary>
            tblExternalPaymentStati for Adyen payments of online reservations.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ReserveAppointmentStatus">
            <summary>
            For online reservations.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ExternalPaymentMode">
            <summary>
            tblExternalPaymentModes
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.CommunicationChannel">
            <summary>
            tblCommunicationChannels, represents the source of the demand.
            Sometimes, the old term "WayOfReservation" is used.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.CheckResult">
            <summary>
            Result of reservation of appointment.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ReservationType">
            <summary>
            The type of a reservation. Determines for example if an appointment will be fixed to an employee.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.GotoPage">
            <summary>
            The pages of the app. Can be used in a tag to open the page.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.AccountSystemLink">
            <summary>
            tblAccountSystemLinks
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ArticleGroupType">
            <summary>
            tblArticleGroupTypes
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ArticlePriceValidityPeriod">
            <summary>
            tblArticlePriceValidityPeriods
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ExternalDisplayText">
            <summary>
            tblExternalDisplayTexts
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.SettingDetail">
            <summary>
            tblSettingDetails
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.PersonStatus">
            <summary>
            tblPersonStati
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ExternalMemberStatus">
            <summary>
            Used for the API that excepts persons and contracts from external systems.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ExternalMemberStatus.Active">
            <summary>
            The person has an active contract.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ExternalMemberStatus.RestPeriod">
            <summary>
            The person has an active contract and a current rest period.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ExternalMemberStatus.Canceled">
            <summary>
            The person does not have an active contract any more.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.PayPalContinueWith">
            <summary>
            After a PayPal payment, once the payment was verified, the controller has to redirect to the page the payment came from.
            This is the information, this enum provides.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.CancelationCriterion">
            <summary>
            tblCancelationCriteria
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.AccessRightType">
            <summary>
            tblAccessRightTypes
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.DocTemplateMapping">
            <summary>
            Specifies the IDs in tblDocTemplateMappings
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.DocumentAction.Display">
            <summary>
            Displays the document on screen
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.DocumentAction.WaitForClose">
            <summary>
            Wait for closing the document by the user
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.DocumentAction.RunMacro">
            <summary>
            Runs integrated macros in the document
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.DocumentAction.Print">
            <summary>
            Prints the document
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.DocumentAction.Save">
            <summary>
            Saves the document automatically
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.DocumentAction.KeepOpen">
            <summary>
            Keeps the document open and finishes the processing of the document
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.DocumentAction.FillBookmarks">
            <summary>
            Fills bookmarks in the document
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.DocumentAction.DisplayFillBookmarksRunMacroAndWaitForClose">
            <summary>
            Displays the document, fills bookmarks and runs macros
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.DocumentAction.DisplayFillBookmarksRunMacroWaitForCloseAndSave">
            <summary>
            Displays the document, fills bookmarks, runs macros, saves the document and waits for close
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.DocumentAction.RunMacroPrintAndSave">
            <summary>
            Prints the document without displaying, fills bookmarks and runs macros
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.PrinterType">
            <summary>
            The enum has to start with either "Admin*" or "Frontend*" !
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.Utilization">
            <summary>
            Utilization of CourseSchedules
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ContractTypes">
            <summary>
            tblContractTypes
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ExternalPaymentType">
            <summary>
            tblExternalPaymentTypes
            Describes the type of the online payment (if neither for appointment nor for course schedule).
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.LogLevel">
            <summary>
            The log levels for tblCrashes.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.LogLevel.Info">
            <summary>
            General information without work interruption
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.LogLevel.InfoReport">
            <summary>
            General information for report execution logging
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.LogLevel.InfoCardTerminal">
            <summary>
            Logs the result of card terminal payments.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.LogLevel.InfoApiAccess">
            <summary>
            Logs authorized API access.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.LogLevel.InfoAdyenPayment">
            <summary>
            Logs Adyen payment requests and responses.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.LogLevel.InfoBankData">
            <summary>
            Logs Bank data information.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.LogLevel.InfoTempSPs">
            <summary>
            Logs information from temp stored procedures.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.LogLevel.Warning">
            <summary>
            User got warned and a piece of work might get lost
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.LogLevel.WarningAzureFunctions">
            <summary>
            Warning or error from an AZURE function.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.LogLevel.ErrorCashRegisterSecurityMasterData">
            <summary>
            Critical master data error occurred
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.LogLevel.Error">
            <summary>
            Critical error occurred, applications needs to close to avoid damaged data
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.CrashLevel">
            <summary>
            The log levels for tblCrashes.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.SepaPayment.SepaType">
            <summary>
            Used for SEPA payments.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.SepaPayment.LocalInstrumentCode">
            <summary>
            Used for SEPA payments.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.SepaPayment.PaymentInitiationType">
            <summary>
            Used for SEPA payments.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.SepaPayment.PaymentType">
            <summary>
            Used for SEPA payments.
            Represents the payment type of a payment (tblPayments).
            This does NOT represent the table tblPaymentTypes.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.SepaPayment.SequenceType">
            <summary>
            Used for SEPA payments.
            Represents the sequence of a direct debit payment. Only RCUR is used.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.SepaPayment.PaymentStatus">
            <summary>
            Used for SEPA payments.
            Represents the status of a payment, see tblPaymentStati.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.SepaPayment.PaymentWarningType">
            <summary>
            Used for SEPA payments.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.SepaPayment.PaymentModus">
            <summary>
            Used for SEPA payments.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.CreditRestriction">
            <summary>
            These are possible restrictions of credits.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.CreditType">
            <summary>
            This enum is used to distinct credits in credits with and without restrictions.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.CreditType.CreditWithRestrictions">
            <summary>
            The credit has limitations, e.g. it can only be used for special articles.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.CreditType.UnrestrictedCredit">
            <summary>
            The credit can be used without any restrictions.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.CreditAction">
            <summary>
            tblCreditActions
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.PaymentPeriod">
            <summary>
            tblPaymentPeriods
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.Vat">
            <summary>
            tblVat
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.PaymentMethod">
            <summary>
            tblPaymentMethods
            Except Sepa=5 which is no value in tblPaymentMethods.
            The entries also exist in <see cref="T:TIM.Common.CoreStandard.Enums.BookingDetailType"/>.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.BookingDetailType">
            <summary>
            tblBookingDetailTypes
            The first entries are identical with tblPaymentMethods in <see cref="T:TIM.Common.CoreStandard.Enums.PaymentMethod"/>.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.RateType">
            <summary>
            attention: Cancelxxx = xxx + 1! I.e. cancel has to be right after original!
            And every original needs to have a cancel, exception: NoContractBooking
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.RestPeriodType">
            <summary>
            tblRestPeriodTypes
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.RestPeriodAction">
            <summary>
            Use these actions to create, modify or delete a rest period.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.CreditBookingType.StandardCredit">
            <summary>
            Is a new credit or used to re-credit an account after a cash receipt was created.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.CreditBookingType.CreditForCashReceipt">
            <summary>
            Is used to balance an account, so that a cash receipt can be created.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.WayOfContact">
            <summary>
            tblWaysOfContacts
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.Titel">
            <summary>
            tblTitles
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ExternalApiType">
            <summary>
            tblExternalApiTypes
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.Department">
            <summary>
            tblDepartments
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.AdyenPaymentResultCodes">
             <summary>
             Possible result codes can be found here:
             https://docs.adyen.com/api-reference/payments-api/paymentresult
             https://docs.adyen.com/api-explorer/#/PaymentSetupAndVerificationService/payments
            
             Full list of result codes is provided here, but not all apply to the used API:
             https://docs.adyen.com/checkout/payment-result-codes
             </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.AdyenPaymentResultCodes.AuthenticationFinished">
            <summary>
            The payment has been successfully authenticated with 3D Secure 2.
            Returned for 3D Secure 2 authentication-only transactions.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.AdyenPaymentResultCodes.Authorised">
            <summary>
            The payment was successfully authorised. This state serves as
            an indicator to proceed with the delivery of goods and services.
            This is a final state.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.AdyenPaymentResultCodes.Cancelled">
            <summary>
            Indicates the payment has been cancelled (either by the shopper or the merchant)
            before processing was completed. This is a final state.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.AdyenPaymentResultCodes.ChallengeShopper">
            <summary>
            The issuer requires further shopper interaction before the payment can be authenticated.
            Returned for 3D Secure 2 transactions.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.AdyenPaymentResultCodes.Error">
            <summary>
            There was an error when the payment was being processed.
            The reason is given in the refusalReason field.
            This is a final state.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.AdyenPaymentResultCodes.IdentifyShopper">
            <summary>
            The issuer requires the shopper's device fingerprint before the payment can
            be authenticated. Returned for 3D Secure 2 transactions.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.AdyenPaymentResultCodes.Pending">
            <summary>
            Indicates that it is not possible to obtain the final status of the payment.
            This can happen if the systems providing final status information for the payment are
            unavailable, or if the shopper needs to take further action to complete the payment.
            For more information on handling a pending payment, refer to Payments with pending status.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.AdyenPaymentResultCodes.PresentToShopper">
            <summary>
            Indicates that the response contains additional information that you need to
            present to a shopper, so that they can use it to complete a payment.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.AdyenPaymentResultCodes.Received">
            <summary>
            Indicates the payment has successfully been received by Adyen, and will be processed.
            This is the initial state for all payments.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.AdyenPaymentResultCodes.RedirectShopper">
            <summary>
            Redirect for PSD2.
            Indicates the shopper should be redirected to an external web page or app to complete the authorisation.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.AdyenPaymentResultCodes.Refused">
            <summary>
            Indicates the payment was refused. The reason is given in the refusalReason field.
            This is a final state.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.AdyenPaymentBrandCodes">
             <summary>
                 The payment method the shopper likes to pay with, i.e. ideal. (optional)
            
                 By providing the brandCode (and optionally the issuerId) the HPP will redirect the shopper directly to this payment method.
                 Please note: the form should be posted to https://test.adyen.com/hpp/skipDetails.shtml rather than directory.shtml,
                 change the hppUrl accordingly. While posting to directory.shtml countryCode becomes a required as well.
             </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ExternalPaymentPartner">
            <summary>
            tblExternalPaymentPartners
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.WebSiteIcon">
            <summary>
            Is used in TIM-Online in TIM.Website. Represents an icon in ~/content/icons/
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.ReportAccessRightType">
            <summary>
            tblReportAccessRightTypes in DB Reporting
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.DayOfWeek">
            <summary>
            tblDaysOfWeek
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.HttpAuthenticationType">
            <summary>
            Is used in ExternalSyncInterface
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.DateValidationType">
            <summary>
            StringValidationTypes:
            - IsInFutureWithoutToday: The value has to be a date in the future, excluding today
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.IntValidationType">
            <summary>
            IntValidationTypes:
            - Minimum: The value has to be greater than, or equal to the Minimum
            - Maximum: The value has to be less than, or equal to the Maximum
            - NotEqualTo: The value can't be equal to the 'NotEqualTo'- Value
            - Range: The value has to meet the above Minimum and Maximum requirements
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.LongValidationType">
            <summary>
            StringValidationTypes:
            - Minimum: The value has to be greater than, or equal to the Minimum
            - Maximum: The value has to be less than, or equal to the Maximum
            - NotEqualTo: The value can't be equal to the 'NotEqualTo'- Value
            - Range: The value has to meet the above Minimum and Maximum requirements
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.StringValidationType">
            <summary>
            StringValidationTypes:
            - Length: property is mandatory if Minimum and Maximum are given
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.StringFormatValidationType">
            <summary>
            StringFormatValidationType:
            - GermanZip: Check German Zip-Codes based on Regex
            - Bic, CreditorID, Iban: checked using IbanHelper methods
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.TickerDirection">
            <summary>
            See http://koderhack.blogspot.de/2011/05/content-ticker-control-in-wpf.html
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.DataSourceType">
            <summary>
            Specifies the data source for different managers (e.g. ObjectManager for TypeCatalog, SettingsManager)
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.DataSourceType.XML">
            <summary>
            Defines the source as a xml file
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.DataSourceType.DB">
            <summary>
            Defines the source as a database
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.DeviceIDs">
            <summary>
            tblDevices
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ZVTCommands.Registration">
            <summary>
            Using the command Registration the Electronic Cash Register can set up different configurations on the PT and also control the
            current status of the Payment-Terminal.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ZVTCommands.Authorization">
            <summary>
            This command initiates a payment process and transmits the amount from the Electronic Cash Register to Payment-Terminal. The result of the
            payment process is reported to the Electronic Cash Register after completion of the booking process.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ZVTCommands.Completion">
            <summary>
            Certain commands must be completed with a separate command.
            Commands which require Completion are explicitly noted within the command description.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ZVTCommands.DisplayText">
            <summary>
            With this command the Electronic Cash Register can cause the Payment-Terminal to display a certain text on the Payment-Terminal-display.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ZVTCommands.LogOff">
            <summary>
            The command Log-Off has the following consequences:
                 - the Payment-Terminal resets the Registration config-byte to 86
                 - the Payment-Terminal may not send any more TLV-containers
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ZVTCommands.AcknowledgmentResponse">
            <summary>
            Default response which acknowledges a previous command
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ZVTCommands.NotSucceededResponse">
            <summary>
            A response 84-yy-xx-xx with ‚yy‘ not equal to ‚00‘ and not equal to ‚9C‘ implies that the Issue-
            of-Goods has not succeeded. If Issue-of-Goods did not succeed the PT reverses the payment.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.ZVTCommands.Abort">
            <summary>
            If a command was not successfully terminated the PT sends command Abort to the Electronic Cash Register.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.SpecialChars.DataLineEscape">
            <summary>
            DLE
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.SpecialChars.StartOfText">
            <summary>
            STX
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.SpecialChars.EndOfText">
            <summary>
            ETX
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.SpecialChars.Acknowledged">
            <summary>
            ACK
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.SpecialChars.NotAcknowledged">
            <summary>
            NAK
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.SpecialChars.CarriageReturn">
            <summary>
            CR
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Enums.SpecialChars.LineFeed">
            <summary>
            LF
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.Currencies">
             <summary>
             The Currency Code (CC) has a length of 2 bytes.
            
             The Currency-Code is checked by the PT as follows to ensure maximum compatibility:
                 · no CC             OK(interpreted as amount in currency ‚EUR‘)
                 · CC = 09 78        OK(= ‚EUR‘)
                 · All other CCs     OK if PT supports multiple currencies otherwise error
             The Payment-Terminal only sends a Currency-Code to the Electronic Cash Register,
             if the Electronic Cash Register had also sent a Currency-Code in its request.
             </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.DoubleValidationType">
            <summary>
            DoubleValidationTypes:
            - Minimum: The value has to be greater than, or equal to the Minimum
            - Maximum: The value has to be less than, or equal to the Maximum
            - NotEqualTo: The value can't be equal to the 'NotEqualTo'- Value
            - Range: The value has to meet the above Minimum and Maximum requirements
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.CashRegisterSecurityWormUserId">
            <summary>
            User for the login method of the WormAPI
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.CashRegisterSecurityWormEntryType">
            <summary>
            Entry types of the WormAPI
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.CashRegisterSecurityWormInitializationState">
            <summary>
            Initialization states of the device which will be access by the WormAPI
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.CashRegisterSecurityLogTypes">
            <summary>
            Log types for the tblCashRegisterSecurityLog
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.CashRegisterSecurityDeviceStati">
            <summary>
            Log types for the tblCashRegisterSecurityDeviceStati
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.VatTypes">
            <summary>
            Types for the vats
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Enums.AutomatedCheckInMessage">
            <summary>
            tblAutomatedCheckInMessages
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.EnumsDavidLloyd.Gender">
            <summary>
            DavidLloyd.dbo.tblGenderMappings
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.EnumsDavidLloyd.AlertSeverity">
            <summary>
            The severity of <see cref="T:TIM.Common.CoreStandard.DTOs.AzureFunctions.ImportData.AlertDto"/>.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.EnumsDavidLloyd.SettingDetail">
            <summary>
            DavidLloyd.dbo.tblSettingDetails
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.EnumsDavidLloyd.PickListItem">
            <summary>
            These are Clubcentric contact preference types.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.EnumsDavidLloyd.PickListItem.SystemEmail">
            <summary>
            System email, will always be TRUE.
            DO NOT MAP (email Payal 11.11.20)
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.EnumsDavidLloyd.PickListItem.MarketingEmail">
            <summary>
            Marketing email, map to TIMs AllowsContactFlag.
            Default is TRUE (for new persons).
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.EnumsDavidLloyd.PickListItem.Newsletter">
            <summary>
            Newsletter, map to TIMs AllowsNewsletterFlag (email Payal 01.12.2020).
            Default is FALSE (for new persons).
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.EnumsDavidLloyd.PickListItem.EGym">
            <summary>
            eGym, map to TIMs tblPersonsEGym.SyncWithEGymFlag.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.EnumsDavidLloyd.ContactType">
            <summary>
            The type of the contact.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.EnumsDavidLloyd.ContactType.Lead">
            <summary>
            TIM: Interessent
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.EnumsDavidLloyd.ContactType.Prospective">
            <summary>
            TIM: Interessent
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.EnumsDavidLloyd.ContactType.Member">
            <summary>
            TIM: Mitglied
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.EnumsDavidLloyd.ContactType.PendingMember">
            <summary>
            TIM: Tagesgast
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.EnumsDavidLloyd.ContactType.Unknown">
            <summary>
            If the CC ContactType in TIM is not yet known
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.EnumsDavidLloyd.MemberStatus">
            <summary>
            The status of the member.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.EnumsDavidLloyd.MemberStatus.Active">
            <summary>
            Active (package is OK)
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.EnumsDavidLloyd.MemberStatus.Cancel">
            <summary>
            Cancel (membership is cancelled)
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.EnumsDavidLloyd.MemberStatus.Attention">
            <summary>
            Attention (not used by DLL)
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.EnumsDavidLloyd.MemberStatus.Frozen">
            <summary>
            Frozen (member has a rest period)
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.EnumsDavidLloyd.MemberStatus.Suspended">
            <summary>
            Suspended (not used by DLL)
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.EnumsDavidLloyd.MemberStatus.Expired">
            <summary>
            Expired (only trial packages, otherwise 'Cancel' status is used for members)
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.EnumsDavidLloyd.RefundReason">
            <summary>
            The reasons for refunds
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.EnumsDavidLloyd.RefundReason.Other">
            <summary>
            Other (used for all refunds)
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.EnumsDavidLloyd.PaymentMethod">
            <summary>
            The payment method ids for refunds
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.EnumsDavidLloyd.PaymentMethod.Cash">
            <summary>
            Cash
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.EnumsDavidLloyd.MiddlewareApiMethod">
            <summary>
            The api methods of middleware
            This enum will be used for logging
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Helper.Encryption.AppointmentDataCryptor">
            <summary>
            This class allows to encrypt and decrypt a <see cref="T:TIM.Common.CoreStandard.DTOs.AppointmentLinkData.AppointmentDataDto"/> object.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.Encryption.AppointmentDataCryptor.Encrypt(TIM.Common.CoreStandard.DTOs.AppointmentLinkData.AppointmentDataDto)">
            <summary>
            Allows to encrypt appointment data.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.Encryption.AppointmentDataCryptor.Decrypt(System.String)">
            <summary>
            Allows to decrypt appointment data.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.Encryption.CryptographyHelper.Encrypt(System.String,System.String)">
            <summary>
            Encrypt data with Rijndael.
            </summary>
            <param name="data"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.Encryption.CryptographyHelper.Decrypt(System.String,System.String)">
            <summary>
            Decrypt data with Rijndael.
            </summary>
            <param name="data"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.Encryption.CryptographyHelper.SpecialEncryptId(System.Int64)">
            <summary>
            Special encryption for IDs with arbitrary salt added before and after the ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.Encryption.CryptographyHelper.SpecialDecryptId(System.String)">
            <summary>
            Special decryption for IDs encrypted by EncryptId.
            </summary>
            <param name="idEncrypted"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.Encryption.CryptographyHelper.CreateSalt(System.Int32,System.Int32)">
            <summary>
            Creates random string of random length. Characters are [a-z][A-Z][0-9].
            </summary>
            <param name="minLength">Min length of salt.</param>
            <param name="maxLength">Max length of salt.</param>
            <returns></returns>
        </member>
        <member name="T:TIM.Common.CoreStandard.Helper.Encryption.PasswordHashingHelper">
            <summary>
            Salted password hashing with PBKDF2-SHA1.
            http://crackstation.net/hashing-security.htm
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.Encryption.PasswordHashingHelper.CreateHash(System.String)">
            <summary>
            Creates a salted PBKDF2 hash of the password.
            Attention: Use method ValidatePassword to check if password is correct!
            </summary>
            <param name="password">The password to hash.</param>
            <returns>The hash of the password, including salt and iterations.</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.Encryption.PasswordHashingHelper.ValidatePassword(System.String,System.String)">
            <summary>
            Validates a password given a hash of the correct one.
            </summary>
            <param name="password">The password to check.</param>
            <param name="passwordHash">A hash of the correct password.</param>
            <returns>True if the password is correct. False otherwise.</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.Encryption.PasswordHashingHelper.GenerateSalt(System.Int32)">
            <summary>
            Convert to string using Convert.ToBase64String(salt)
            </summary>
            <param name="saltByteSize"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.Encryption.PasswordHashingHelper.SlowEquals(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays in length-constant time. This comparison
            method is used so that password hashes cannot be extracted from
            on-line systems using a timing attack and then attacked off-line.
            In other words, the comparison allways takes the same time, no matter
            if the difference is in the first or the last byte.
            </summary>
            <param name="a">The first byte array.</param>
            <param name="b">The second byte array.</param>
            <returns>True if both byte arrays are equal. False otherwise.</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.Encryption.PasswordHashingHelper.ToHash(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the PBKDF2-SHA1 hash of a password.
            Convert to string using Convert.ToBase64String(hash)
            </summary>
            <param name="password">The password to hash.</param>
            <param name="salt">The salt.</param>
            <param name="iterations">The PBKDF2 iteration count.</param>
            <param name="outputBytes">The length of the hash to generate, in bytes.</param>
            <returns>A hash of the password.</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.Encryption.PasswordHashingHelper.IsValidPassword(System.String)">
            <summary>
            Returns TRUE if the given password is a valid password.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.Encryption.PasswordHashingHelper.GenerateRandomPassword(System.Int32)">
            <summary>
            Creates a random password with the given length.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Helper.Encryption.ProfileDataEncryptionHelper">
            <summary>
            This class helps encrypt and decrypt the profile data (person profile ID and identification code) for tokens.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Helper.CapacityUtilizationCalculator">
            <summary>
            This class helps calculating the current capacity utilization of subsidiaries.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Helper.CapacityUtilizationCalculator.MaxRemainingCapacityMedium">
            <summary>
            If the remaining capacity in percent is equal or lower to this value,
            show the remaining capacity in orange.
            </summary>
        </member>
        <member name="F:TIM.Common.CoreStandard.Helper.CapacityUtilizationCalculator.MaxRemainingCapacityHigh">
            <summary>
            If the remaining capacity in percent is equal or lower to this value,
            show the remaining capacity in red.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.CapacityUtilizationCalculator.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Default constructor.
            </summary>
            <param name="usedCapacity">The current utilization of the subsidiary.</param>
            <param name="maxCapacity">The maximum capacity of the subsidiary.</param>
        </member>
        <member name="P:TIM.Common.CoreStandard.Helper.CapacityUtilizationCalculator.SubsidiaryHasMaximumCapacity">
            <summary>
            If TRUE, then the subsidiary has a maximum capacity. Otherwise the capacity is unlimited.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Helper.CapacityUtilizationCalculator.MaxCapacity">
            <summary>
            The maximum capacity of the subsidiary.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Helper.CapacityUtilizationCalculator.UsedCapacity">
            <summary>
            The currently used capacity of the subsidiary.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Helper.CapacityUtilizationCalculator.RemainingCapacity">
            <summary>
            The remaining capacity of the subsidiary.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Helper.CapacityUtilizationCalculator.CurrentUtilizationInPercent">
            <summary>
            The used capacity of the subsidiary in percent.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Helper.CapacityUtilizationCalculator.RemainingCapacityInPercent">
            <summary>
            The remaining capacity of the subsidiary in percent.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Helper.CapacityUtilizationCalculator.CapacityUtilization">
            <summary>
            The capacity utilization category.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.CapacityUtilizationCalculator.CalculateCapacityUtilization">
            <summary>
            Transforms the current utilization of a subsidiary into <see cref="T:TIM.Common.CoreStandard.Enums.CapacityUtilization"/>.
            </summary>
            <returns>The current utilization as a category (high=red / medium=orange / low=green).</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.DataTableHelper.ToDataRow``1(``0)">
            <summary>
            Converts an Item to DataRow
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.DataTableHelper.ToDataTable``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            Converts a List to a DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.DataTableHelper.CreateTable``1">
            <summary>
            Creates a generic DataTable
            </summary>
            <typeparam name="T">the tyoe for which the table will be created</typeparam>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.EnumHelper.ToStringGerman(TIM.Common.CoreStandard.Enums.PaymentMethod,System.Boolean,System.Boolean)">
            <summary>
            German translation for payment method enum
            </summary>
            <param name="paymentMethod"></param>
            <param name="shortDescription">TRUE = short (Bar), FALSE = long (Barzahlung)</param>
            <param name="isRefund">Default is FALSE, set to TRUE if this is a refund.</param>
            <returns></returns>
        </member>
        <member name="F:TIM.Common.CoreStandard.Helper.ExtensionMethods.WngEMailInvalid">
            <summary>
            Add Error / Info Messages used by the ExtensionMethods here
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.HasContract(System.Int32)">
            <summary>
            Is used in TIM-Online.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.IsEmployee(System.Int32)">
            <summary>
            Is used in TIM-Online.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.IsValidEmail(System.String)">
            <summary>
            Checks if the string is a valid email address.
            </summary>
            <returns>Returns true, if the email address is not empty and valid.</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.IsValidEmailOrEmpty(System.String,System.Int32,System.String@)">
             <summary>
             Validates the trimmed Email by maxLength and the regex from Constants.Regex.Email
            
             null and empty string will be accepted as valid
             </summary>
             <param name="email">EMail String, null is accepted as empty String</param>
             <param name="maxLength">the email has to be shorter than maxLength</param>
             <param name="error">returns errors if the mail is too long or invalid</param>
             <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.ToPhoneNumber(System.String,System.Int32)">
            <summary>
            Replaces leading '00' by '+' and removes non digits.
            NULL will be converted into empty string.
            </summary>
            <param name="phoneNumber">The phone number, that might contain characters.</param>
            <param name="maxLength">The maximal length of the phone number.</param>
            <returns>Returns the corrected phone number that consists only of digits and is no longer than <see cref="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.MaxLength(System.String,System.Int32)"/>.</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.ToTelephoneNumber(System.String,System.String@,System.Int32)">
             <summary>
             Converts a string to a telephone number.
             Also removes invalid characters outputs error message if any.
            
             The default MaxLength is 64 but can also be changed.
             Leading '00' will be replaced with '+' and any non digit will be removed.
             </summary>
             <param name="input">the input string</param>
             <param name="error">has a value if the input string contains any invalid characters</param>
             <param name="maxLength">the max length of the returned number</param>
             <returns>Returns the corrected phone number.</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.ToNormalizedMobileNumber(System.String,System.Int32,System.Boolean)">
            <summary>
            Converts a mobile number to a standardized format, so that it can be compared or an sms can be sent.
            </summary>
            <param name="mobileNumber">mobile phone number</param>
            <param name="standardCountryCode"></param>
            <param name="throwException"></param>
            <returns>Returns the mobile phone number in the form +49172xxx</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.IsValidMobileNumber(System.String,System.Int32,System.Boolean)">
            <summary>
            Checks if the mobile phone number is valid.
            </summary>
            <param name="mobileNumber">The mobile phone number you want to check.</param>
            <param name="standardCountryCode">The standard country code of your region.</param>
            <param name="emptyStringIsValid">If TRUE, then empty strings are valid.</param>
            <returns>Returns true if the number is a valid mobile phone number</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.IsValidPhoneNumber(System.String,System.Boolean)">
            <summary>
            Checks if the phone number valid.
            </summary>
            <param name="phoneNumber">The phone number to be checked.</param>
            <param name="emptyStringIsValid">If TRUE, then empty strings are valid.</param>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.Coalesce(System.String,System.String)">
            <summary>
            Returns the default text if provided and not empty or white space, else returns the alternate text.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.IsValidPassword(System.String)">
            <summary>
            Returns true if the password is a valid password.
            It must have a minimum length and it must not contain empty spaces.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.RemoveSpecialCharacters(System.String)">
            <summary>
            Returns a string without special characters and whitespaces
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.ToStringWithAsterisk(System.String)">
            <summary>
            Only shows the first two letters of each name and replaces the rest by '*****'.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.IsNumber(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Check if the string is a valid number (long).
            </summary>
            <param name="number">The string to check.</param>
            <param name="minNumber">Optional minimum number to check.</param>
            <param name="maxNumber">Optional maximum number to check.</param>
            <returns>Returns TRUE if the string is a valid long number within the optional range.</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.Fallback(System.String,System.String)">
            <summary>
            Returns the <see cref="!:text"/> or,
            if is null or white space,
            returns the <see cref="!:fallbackText"/>.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.TrimNullable(System.String)">
            <summary>
            Trims the given text and converts null to empty string
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.IsProvided(System.String)">
            <summary>
            Returns TRUE if <see cref="!:text"/> is not NULL or white space.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.ToTitleCase(System.String)">
            <summary>
            Converts the first letter of each word into uppercase and trims.
            NULL will be converted into empty string.
            </summary>
            <returns>Returns the <see cref="!:text"/> in title case.</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.IsValidHttpUrl(System.String)">
            <summary>
            Checks if the given string is a correct http or https url
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.IsValidYoutubeID(System.String)">
            <summary>
            Checks against a regex if input is a valid youtube id with exactly eleven characters
            </summary>
            <param name="youtubeID"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.IsArticleYoutubeID(System.String)">
            <summary>
            Checks against a regex if input is a valid youtube id with the youtube identifier for Articles
            </summary>
            <param name="youtubeID"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.IsValidDecimal(System.String)">
            <summary>
            Checks if the given string fits a decimal with a maximum of 2 digits after comma.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="F:TIM.Common.CoreStandard.Helper.ExtensionMethods.RegexInvalidXmlCharacters">
            <summary>
            Is needed for <see cref="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.RemoveInvalidXmlCharacters(System.String)"/>. Finds the ASCII characters 1-8, 11, 12, 14-31. Allowed are 9=Tab, 10=Line Feed and 13=Return.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.RemoveInvalidXmlCharacters(System.String)">
            <summary>
            Removes characters from the string that will cause problems when transferring the data by soap web service.
            See https://blog.magerquark.de/xml-fehlermeldung-hexadezimaler-wert-ist-ein-ungueltiges-zeichen/
            </summary>
            <returns>Returns the text without the invalid characters.</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.EncodeInvalidXmlCharacters(System.String)">
            <summary>
            Replaces or encodes characters from the <see cref="!:text"/> that are not valid for xml.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.TryParseToBool(System.String,System.Boolean@)">
            <summary>
            Extended bool.TryParse. Also Checks if string is valid '0' or '1' input.
            </summary>
            <param name="input"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.GetFirstWord(System.String)">
            <summary>
            Returns all character before the first empty string. if no empty string is found, returns the input without change
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.ToListWithLongIDs(System.String,System.String)">
            <summary>
            Converts a string into a list with long numbers.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.Standardize(System.String)">
            <summary>
            Returns a string without ambigous letters like [äéß], so that two names can be compared.
            </summary>
            <param name="strString">Text that should be transformed.</param>
            <returns>Returns the input text without ambigous letters like ä, é, ß etc.</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.ToDictionaryWithLongIDs(System.String)">
            <summary>
                Splits a string into a dictionary with key IDs of type long and value IDs of type string
                The keyValuePairs in the string are separated by a sharp (#).
                Key and value are separated by a semicolon (;).
                Empty strings as second ID are allowed and will be returned as such.
                Null as second ID will not be recognized and returned as string "Null"
            </summary>
            <param name="tuplesSeparatedWithSharp"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.ToNumbersOnly(System.String,System.Boolean)">
            <summary>
            Removes all characters that are not digits.
            NULL will be converted into empty string.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.ToTimeSpan(System.String,System.Boolean)">
            <summary>
            Will convert the text into a TimeSpan.
            Invalid values will return NULL.
            </summary>
            <param name="text">The text you want to convert.</param>
            <param name="allowTimeOfDayOnly">Optional. If TRUE, then values before 0h or on or after 24h will return NULL.</param>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.Compare(System.String,System.String)">
            <summary>
            Compares two strings and returns the percentage between 0 and 1 of the resemblance
            </summary>
            <param name="strNotStandardized">First string, will be standardized</param>
            <param name="strStandardized">Second string, will not be standardized</param>
            <returns>Resemblance of the two strings in percent (1 = 100%)</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.UrlEncode(System.String)">
            <summary>
            Encodes text so that it is valid in an url.
            </summary>
            <param name="text"></param>
            <returns>Returns the text so that it can be used in an url</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.ContainsUniCodeCharacter(System.String)">
            <summary>
            Checks if string contains only unicode character
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.ToInteger(System.String,System.Int32)">
            <summary>
            Converts the given string to integer. If the string cannot be converted or IsNullOrWhitespace, the alternativeReturnValue will be returned
            </summary>
            <param name="text"></param>
            <param name="alternativeReturnValue"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.WinFileName(System.String)">
            <summary>
            Corrects a possible invalid file name.
            </summary>
            <param name="strFullFileName">The file name</param>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.LastDayOfMonth(System.DateTime)">
            <summary>
            Returns the last day of the month of the given date. Time is cut off.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.FirstDayOfMonth(System.DateTime)">
            <summary>
            Returns the first day of the month of the given date. Time is cut off.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.Age(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Calculates the age of a person.
            </summary>
            <param name="dateOfBirth">The date of birth.</param>
            <param name="dateForAgeCalculation">Optional. The date for which the age should be calculated. Is today if not provided.</param>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.GetDueDate(System.DateTime)">
            <summary>
            Calculates DueDate: Until 3am DueDate is date of day before
            </summary>
            <param name="timePoint">Time point including timespan</param>
            <returns>Date without timespan</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.GetFirstDayOfWeek(System.DateTime)">
            <summary>
            Calculates the date of the preceding Monday.
            Until 3am the date of the timePoint is the day before!
            </summary>
            <param name="timePoint">Time point including timespan</param>
            <returns>Date of preceding Monday</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.AddOneWeek(System.DateTime,System.Boolean)">
            <summary>
            Add 6 days to get the duration of one week.
            </summary>
            <param name="date">The date to start with.</param>
            <param name="toSundayOnly">The new date will be a sunday, so 6 days or less are added. If the start date is a sunday, the new day will be the start day.</param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.SubtractPeriod(System.DateTime,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Calculates the date and time from which the limit will be taken into consideration.
            Only one limit can be set.
            </summary>
            <param name="startDateAndTime">The time point to start the calculation.</param>
            <param name="minutes">The limit in minutes.</param>
            <param name="days">The limit in days. Only whole days are considered, the minutes are irrelevant.</param>
            <param name="calendarWeeks">The limit in calendar weeks (Monday to Sunday). The current week is counted as a whole week. Only whole days are considered, the minutes are irrelevant.</param>
            <param name="months">The limit in months. Only whole days are considered, the minutes are irrelevant.</param>
            <returns>Returns a date with a time, when the limit starts.</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.AddPeriod(System.DateTime,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Calculates the date and time until which the limit will be taken into consideration.
            Only one limit can be set.
            </summary>
            <param name="startDateAndTime">The time point to start the calculation.</param>
            <param name="minutes">The limit in minutes.</param>
            <param name="days">The limit in days. Only whole days are considered, the minutes are irrelevant.</param>
            <param name="calendarWeeks">The limit in calendar weeks (Monday to Sunday). The current week is counted as a whole week. Only whole days are considered, the minutes are irrelevant.</param>
            <param name="months">The limit in months. Only whole days are considered, the minutes are irrelevant.</param>
            <returns>Returns a date with a time, when the limit ends.</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.ConvertFromBerlinTimeToUTC(System.DateTime)">
            <summary>
            Convert the date time from Berlin time to UTC time
            </summary>
            <param name="dtDate"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.TrimStringProperties``1(``0)">
            <summary>
            Trims all string properties of the given entity
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.RemoveInvalidXmlCharacters``1(``0)">
            <summary>
            Removes all InvalidXmlCharacters in strings of the given entity
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.CastToEnum``1(System.Object)">
            <summary>
            Tries to cast an int or a string into an enum.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="value">The value to be casted.</param>
            <exception cref="T:TIM.Common.CoreStandard.TIMCommonCoreStandardException">Throws exception if cast is not possible.</exception>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.CastToEnum``1(System.Object,``0)">
            <summary>
            Tries to cast an int or a string into an enum.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="value">The value to be casted.</param>
            <param name="fallback">Default value, if <see cref="!:value"/> is not defined.</param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.ToCommunicationChannel(System.Nullable{System.Int32})">
            <summary>
            Tries to convert the value into an <see cref="T:TIM.Common.CoreStandard.Enums.CommunicationChannel"/>.
            The default value for NULL or not defined is <see cref="F:TIM.Common.CoreStandard.Enums.CommunicationChannel.Intern"/>.
            </summary>
            <param name="communicationChannel">The int value of the communication channel. Can be NULL, then the default value <see cref="F:TIM.Common.CoreStandard.Enums.CommunicationChannel.Intern"/> will be returned.</param>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.TryConvertToDecimal(System.Double,System.Decimal@)">
            <summary>
            Checks for Overflow Exception when casting double to decimal
            Returns true if conversion was successful
            </summary>
            <param name="value">double value to be converted</param>
            <param name="output">Return value of conversion</param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.AppendFormattedLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            Only used in Exception Logging for Summary
            </summary>
            <param name="MyBuilder"></param>
            <param name="strFormat"></param>
            <param name="MyParams"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.AppendPrefixedLineEx(System.Text.StringBuilder,System.String,System.Func{System.String},System.Collections.Generic.List{System.Exception})">
            <summary>
            Only used in Exception Logging for Summary
            </summary>
            <param name="MyBuilder"></param>
            <param name="strPrefix"></param>
            <param name="funcString"></param>
            <param name="exExceptions"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.ToObservableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts List into ObservableCollection for ViewModel
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Do NOT use in TIM.Database, will lead to exception.
            In TIM.Database, use method ToHashSet2.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.ToDataTable``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            Converts a List to a DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="acceptChanges">If True, all DataRows will be in Unmodified state</param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.ExceptWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns a new list with all items that not fit the filter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ExtensionMethods.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Distinct Method with added parameter
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="T:TIM.Common.CoreStandard.Helper.HistoryChangesHelper">
            <summary>
            This class helps to track changes.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.HistoryChangesHelper.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="header">Description of the changes.</param>
            <param name="lineBreak">Optional, here you can change the line break. Default value is <see cref="P:System.Environment.NewLine"/>.</param>
        </member>
        <member name="P:TIM.Common.CoreStandard.Helper.HistoryChangesHelper.ChangesExist">
            <summary>
            Is TRUE if any changes were found.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Helper.HistoryChangesHelper.Changes">
            <summary>
            The description of the changes.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.HistoryChangesHelper.AddChanges(TIM.Common.CoreStandard.Interfaces.IPersonCompareChanges,TIM.Common.CoreStandard.Interfaces.IPersonCompareChanges,TIM.Common.CoreStandard.Helper.HistoryChangesData)">
            <summary>
            Checks all the current values of a persons to the new values and adds all changes.
            </summary>
            <param name="oldPerson">The current values of the person.</param>
            <param name="newPerson">The new values of the person.</param>
            <param name="data">Lists with subsidiaries, person statuses, countries etc.</param>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.HistoryChangesHelper.AddChanges(System.String,System.String,System.String)">
            <summary>
            Checks if the value changed and adds the changes to the protocol.
            </summary>
            <param name="description">The description of the value.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.HistoryChangesHelper.AddChanges(System.String)">
            <summary>
            Adds the text to the protocol and sets <see cref="P:TIM.Common.CoreStandard.Helper.HistoryChangesHelper.ChangesExist"/> to TRUE.
            </summary>
            <param name="text">The text to add to the protocol.</param>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.HistoryChangesHelper.AddText(System.String)">
            <summary>
            Adds the text to the protocol.
            Does NOT change <see cref="P:TIM.Common.CoreStandard.Helper.HistoryChangesHelper.ChangesExist"/>.
            </summary>
            <param name="text">The text to add to the protocol.</param>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.HistoryChangesHelper.AddLineBreak">
            <summary>
            Adds a line break to changes if needed.
            Does NOT change <see cref="P:TIM.Common.CoreStandard.Helper.HistoryChangesHelper.ChangesExist"/>.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.HistoryChangesHelper.AddChangesIfNotEmpty(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Checks if the <see cref="!:newValue"/> is not empty.
            </summary>
            <param name="description">The description of the value.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value (if not empty).</param>
            <param name="toTitleCase">If TRUE, then the value will be converted into title case.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="T:TIM.Common.CoreStandard.Helper.HistoryChangesData">
            <summary>
            This class provides data for <see cref="T:TIM.Common.CoreStandard.Helper.HistoryChangesHelper"/>.
            To use it, you can derive from this class to fill the properties.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.IBANHelper.ToFormatedIBAN(System.String)">
            <summary>
            Returns the IBAN in groups of four.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.IBANHelper.ToFormatedIBANWithAsterisk(System.String)">
            <summary>
            Splits the IBAN in groups of four and replaces the characters by '*', only the last four characters are displayed.
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.IBANHelper.GetBankCodeFromIBAN(System.String)">
            <summary>
            Returns the BankCode from the given iban
            Returns 0 if no bank code could be found
            </summary>
            <param name="iban"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.IBANHelper.ToNonSpacedIBAN(System.String)">
            <summary>
            Replaces all empty spaces inside string with string.Empty
            </summary>
            <param name="iban"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ReflectionHelper.GetProperty``1(``0,System.String)">
            <summary>
            Returns string value of property, or NULL if not found
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ReflectionHelper.GetPropertyObject``1(``0,System.String)">
            <summary>
            Returns string value of property, or NULL if not found
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ReflectionHelper.TrySetProperty``1(``0,System.String,System.Object)">
            <summary>
            Sets value of property if possible
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <returns>Returns TRUE if the value was changed, otherwise returns FALSE.</returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.ReflectionHelper.CreateList(System.Type)">
            <summary>
            Creates an IList object of the given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:TIM.Common.CoreStandard.Helper.RegistryHelper.InstallPath">
            <summary>
            Gets the absolute installation path for tim-administrator (e.g. for accessing the .config file)
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Helper.RegistryHelper.BalloonTips">
            <summary>
            Returns TRUE if BalloonTips are possible, might not be the case if windows "Leistung optimieren" is activated
            </summary>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.RegistryHelper.GuessInstallPaths(System.IO.DirectoryInfo)">
            <summary>
            Takes an installation path of one TIM related application and tries
            to guess parallel other application installation paths
            </summary>
            <param name="dirSample">The install path of one TIM related application</param>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.TillIDHelper.CheckTillID(TIM.Common.CoreStandard.DTOs.ComputerSettings.ComputerNameTillIdDto,System.Collections.Generic.List{TIM.Common.CoreStandard.DTOs.ComputerSettings.ComputerNameTillIdDto},System.Int32,System.String@)">
            <summary>
            Check the computer name till id dto for plausibility
            </summary>
            <param name="computerNameTillIdDtoToCheck"></param>
            <param name="allComputerNameTillIdDtos"></param>
            <param name="maxTillId"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.TillIDHelper.CheckTillID(System.Collections.Generic.List{TIM.Common.CoreStandard.DTOs.ComputerSettings.ComputerNameTillIdDto},System.Int32,TIM.Common.CoreStandard.DTOs.ComputerSettings.ComputerNameTillIdResultDto)">
            <summary>
            Check all computer name till id dtos for plausibility
            </summary>
            <param name="allComputerNameTillIdDtos"></param>
            <param name="maxTillId"></param>
            <param name="computerNameTillIdResultDto"></param>
            <returns></returns>
        </member>
        <member name="M:TIM.Common.CoreStandard.Helper.TillIDHelper.GetAllFreeTillID(System.Collections.Generic.List{TIM.Common.CoreStandard.DTOs.ComputerSettings.ComputerNameTillIdDto},System.Int32,System.Int32,System.Int32)">
            <summary>
            Get all free till ids
            </summary>
            <param name="allComputerNameTillIdDtos"></param>
            <param name="startTillID"></param>
            <param name="maxTillID"></param>
            <param name="step"></param>
            <returns></returns>
        </member>
        <member name="T:TIM.Common.CoreStandard.Interfaces.CashReceipt.ICashReceiptPrinter">
            <summary>
            Contains all data that is needed to print a cash receipt.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Interfaces.CashReceipt.ICashReceiptPrinter.CompanyText">
            <summary>
            Company name, address, VAT id etc. for the header of the cash receipt.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Interfaces.CashReceipt.ICashReceiptPrinter.HeaderText">
            <summary>
            Cash receipt id, date, customer, employee etc.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Interfaces.CashReceipt.ICashReceiptPrinter.FooterInfoText">
            <summary>
            General information like advertisements, from tblInfoTexts.
            Depends on the subsidiary of the cash receipt.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Interfaces.CashReceipt.ICashReceiptPrinter.FooterThanksText">
            <summary>
            Global cash receipt information from the general settings.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Interfaces.CashReceipt.ICashReceiptPrinter.Consumptions">
            <summary>
            All consumptions in the upper part of the cash receipt.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Interfaces.CashReceipt.ICashReceiptPrinter.Payments">
            <summary>
            All payments in the lower part of the cash receipt.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Interfaces.CashReceipt.ICashReceiptPrinter.VatItems">
            <summary>
            Contains all vat information.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Interfaces.CashReceipt.ICashReceiptPrinter.AdditionalInformation">
            <summary>
            Contains additional information on the receipt (e.g. on vouchers and credits).
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Interfaces.CashReceipt.IQryCashReceiptBookingsSum">
            <summary>
            Represents qryCashReceiptBookingsSum and qryCashReceiptBookingsSumTransferBooking
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Interfaces.IPersonCompareChanges">
            <summary>
            Use this interface for the <see cref="T:TIM.Common.CoreStandard.Helper.HistoryChangesHelper"/>.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Interfaces.Online.IOutputDto.Successful">
            <summary>
            Is TRUE if everything is OK.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Interfaces.Online.IPayPalRedirect.RedirectPathToCheckPayPalPayment">
            <summary>
            This is the path for the redirect after the PayPal payment to check the payment.
            The base URL will be loaded from the settings.
            Only needed for PayPal payments, not for credit card payments.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Interfaces.Online.IPayPalRedirect.LocalHostUrlForDebugging">
            <summary>
            For debugging only. Only needed for PayPal payments. A value is only set if a debugger is attached.
            This is the base URL of the local host. It is needed to redirect to the local host instead of the azure web site to check the PaPal payment.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Interfaces.Online.IPayPalResult.PayPalRequestUrl">
            <summary>
            The URL for the redirect to the pay pal web site.
            Here the PayPal-payment will be executed.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Interfaces.Online.IRequestWithProfileDto">
            <summary>
            This interface is needed for GenericController class of the backend. It represents a request including profile data.
            </summary>
        </member>
        <member name="T:TIM.Common.CoreStandard.Interfaces.Online.IResultDto">
            <summary>
            This interface is needed for GenericController class of the backend. It represents a result.
            </summary>
        </member>
        <member name="P:TIM.Common.CoreStandard.Interfaces.Online.IResultDto.Message">
            <summary>
            Any message that will be displayed to the user. Can be error message or success message.
            </summary>
        </member>
    </members>
</doc>
